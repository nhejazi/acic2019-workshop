[
["index.html", "The tlverse Software Ecosystem for Causal Inference 2019 Atlantic Causal Inference Conference Preface Important links About this workshop Outline About the instructors", " The tlverse Software Ecosystem for Causal Inference 2019 Atlantic Causal Inference Conference Mark van der Laan, Alan Hubbard, Jeremy Coyle, Nima Hejazi, Ivana Malenica, Rachael Phillips updated: May 22, 2019 Preface This is an open source and fully-reproducible electronic vignette for a full-day short-course on applying the targeted learning methodology in practice using the tlverse software ecosystem, given at the 2019 Atlantic Causal Inference Conference in Montréal, Québec, Canada on 22 May 2019. The Hitchhiker’s Guide to the tlverse, or a Targeted Learning Practitioner’s Handbook accompanies this vignette and covers the same topics presented in this vignette, but presents them in more detail. Important links Software installation Please install the relevant software before the workshop. installation script You will probably exceed the GitHub API rate limit during this installation, and this will throw an error. This issue and the solution are addressed here. Workshop surveys These pre- and post-workshop surveys help us ensure the effectiveness of our teaching methodology. pre-workshop survey post-workshop survey Etherpad We will use the Etherpad for discussion, Q&amp;A, and sharing URLs and bits of code. https://etherpad.net/p/acic2019-tlverse Code R script files for each section of the workshop are available via the GitHub repository for the short course. https://github.com/tlverse/acic2019-workshop/tree/master/handbook/R RStudio Cloud We created an RStudio Cloud Workspace for this workshop to serve as an alternative to installing the software locally. tlverse-workshop RStudio Cloud Workspace About this workshop This full-day workshop will provide a comprehensive introduction to the field of targeted learning for causal inference and the corresponding tlverse software ecosystem. In particular, we will focus on targeted minimum loss-based estimators of causal effects, including those of static, dynamic, optimal dynamic, and stochastic interventions. These multiply robust, efficient plug-in estimators use state-of-the-art, ensemble machine learning tools to flexibly adjust for confounding while yielding valid statistical inference. We will discuss the utility of this robust estimation strategy in comparison to conventional techniques, which often rely on restrictive statistical models and may therefore lead to severely biased inference. In addition to discussion, this workshop will incorporate both interactive activities and hands-on, guided R programming exercises, to allow participants the opportunity to familiarize themselves with methodology and tools that will translate to real-world causal inference analyses. It is highly recommended for participants to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. Outline This is a full-day (6-hour) workshop, featuring modules that introduce distinct causal questions, each motivated by a case study, alongside statistical methodology and software for assessing the causal claim of interest. A sample schedule may take the form: 08:30AM–09:00AM: Address software installation issues 09:00AM–09:10AM: Introductions 09:10AM–09:30AM: Introduction to the tlverse software ecosystem 09:30AM–10:00AM: The Roadmap of Targeted Learning, and the WASH Benefits data 10:00AM–10:20AM: Morning coffee break 10:20AM–10:50AM: Why we need a statistical revolution 10:50AM–11:50AM: Ensemble machine learning with the sl3 R package 11:50AM–12:10PM: Targeted learning for causal inference with the tmle3 R package 12:10PM–01:00PM: Lunch break 01:00PM–01:30PM: Targeted learning for causal inference with the tmle3 R package 01:30PM–02:00PM: Optimal treatment regimes and the tmle3mopttx R package 02:00PM–02:20PM: Afternoon coffee break 02:20PM–02:50PM: Optimal treatment regimes and the tmle3mopttx R package 02:50PM–04:00PM: Stochastic treatment regimes and the tmle3shift R package About the instructors Mark van der Laan Mark van der Laan, Ph.D., is Professor of Biostatistics and Statistics at UC Berkeley. His research interests include statistical methods in computational biology, survival analysis, censored data, adaptive designs, targeted maximum likelihood estimation, causal inference, data-adaptive loss-based learning, and multiple testing. His research group developed loss-based super learning in semiparametric models, based on cross-validation, as a generic optimal tool for the estimation of infinite-dimensional parameters, such as nonparametric density estimation and prediction with both censored and uncensored data. Building on this work, his research group developed targeted maximum likelihood estimation for a target parameter of the data-generating distribution in arbitrary semiparametric and nonparametric models, as a generic optimal methodology for statistical and causal inference. Most recently, Mark’s group has focused in part on the development of a centralized, principled set of software tools for targeted learning, the tlverse. For more information, see https://vanderlaan-lab.org. Alan Hubbard Alan Hubbard, Ph.D., is Professor of Biostatistics, former head of the Division of Biostatistics at UC Berkeley, and head of data analytics core at UC Berkeley’s SuperFund research program. His current research interests include causal inference, variable importance analysis, statistical machine learning, estimation of and inference for data-adaptive statistical target parameters, and targeted minimum loss-based estimation. Research in his group is generally motivated by applications to problems in computational biology, epidemiology, and precision medicine. Jeremy Coyle Jeremy Coyle, Ph.D., is a consulting data scientist and statistical programmer, currently leading the software development effort that has produced the tlverse ecosystem of R packages and related software tools. Jeremy earned his Ph.D. in Biostatistics from UC Berkeley in 2016, primarily under the supervision of Alan Hubbard. Nima Hejazi Nima is a Ph.D. candidate in biostatistics with a designated emphasis in computational and genomic biology, working jointly with Mark van der Laan and Alan Hubbard. Nima is affiliated with UC Berkeley’s Center for Computational Biology and NIH Biomedical Big Data training program. His research interests span causal inference, nonparametric inference and machine learning, targeted loss-based estimation, survival analysis, statistical computing, reproducible research, and high-dimensional biology. He is also passionate about software development for applied statistics, including software design, automated testing, and reproducible coding practices. For more information, see https://nimahejazi.org. Ivana Malenica Ivana is a Ph.D. student in biostatistics advised by Mark van der Laan. Ivana is currently a fellow at the Berkeley Institute for Data Science, after serving as a NIH Biomedical Big Data and Freeport-McMoRan Genomic Engine fellow. She earned her Master’s in Biostatistics and Bachelor’s in Mathematics, and spent some time at the Translational Genomics Research Institute. Very broadly, her research interests span non/semi-parametric theory, probability theory, machine learning, causal inference and high-dimensional statistics. Most of her current work involves complex dependent settings (dependence through time and network) and adaptive sequential designs. Rachael Phillips Rachael is a Ph.D. student in biostatistics, advised by Alan Hubbard and Mark van der Laan. She has an M.A. in Biostatistics, B.S. in Biology with a Chemistry minor and a B.A. in Mathematics with a Spanish minor. Her research is applied, and specific to human health. Motivated by issues arising in healthcare, Rachael leverages strategies rooted in causal inference and nonparametric estimation to build clinician-tailored, machine-driven solutions. Her accompanying statistical interests include high-dimensional statistics and experimental design. She is also passionate about free, online-mediated education. She is affiliated with the UC Berkeley Center for Computational Biology, NIH Biomedical Big Data Training Program, and Superfund Research Program. "],
["motivation.html", "Motivation", " Motivation “One enemy of robust science is our humanity — our appetite for being right, and our tendency to find patterns in noise, to see supporting evidence for what we already believe is true, and to ignore the facts that do not fit.” — (“Let’s Think About Cognitive Bias” 2015) Scientific research is at a unique point in history. The need to improve rigor and reproducibility in our field is greater than ever; corroboration moves science forward, yet there is a growing alarm about results that cannot be reproduced and that report false discoveries (Baker 2016). Consequences of not meeting this need will result in further decline in the rate of scientific progression, the reputation of the sciences, and the public’s trust in its findings (Munafò et al. 2017; “How Scientists Fool Themselves – and How They Can Stop” 2015). “The key question we want to answer when seeing the results of any scientific study is whether we can trust the data analysis.” — Peng (2015) Unfortunately, at its current state the culture of data analysis and statistics actually enables human bias through improper model selection. All hypothesis tests and estimators are derived from statistical models, so to obtain valid estimates and inference it is critical that the statistical model contains the process that generated the data. Perhaps treatment was randomized or only depended on a small number of baseline covariates; this knowledge should and can be incorporated in the model. Alternatively, maybe the data is observational, and there is no knowledge about the data-generating process (DGP). If this is the case, then the statistical model should contain all data distributions. In practice; however, models are not selected based on knowledge of the DGP, instead models are often selected based on (1) the p-values they yield, (2) their convenience of implementation, and/or (3) an analysts loyalty to a particular model. This practice of “cargo-cult statistics — the ritualistic miming of statistics rather than conscientious practice,” (Stark and Saltelli 2018) is characterized by arbitrary modeling choices, even though these choices often result in different answers to the same research question. That is, “increasingly often, [statistics] is used instead to aid and abet weak science, a role it can perform well when used mechanically or ritually,” as opposed to its original purpose of safeguarding against weak science (Stark and Saltelli 2018). This presents a fundamental drive behind the epidemic of false findings that scientific research is suffering from (???). “We suggest that the weak statistical understanding is probably due to inadequate”statistics lite&quot; education. This approach does not build up appropriate mathematical fundamentals and does not provide scientifically rigorous introduction into statistics. Hence, students’ knowledge may remain imprecise, patchy, and prone to serious misunderstandings. What this approach achieves, however, is providing students with false confidence of being able to use inferential tools whereas they usually only interpret the p-value provided by black box statistical software. While this educational problem remains unaddressed, poor statistical practices will prevail regardless of what procedures and measures may be favored and/or banned by editorials.&quot; — Szucs and Ioannidis (2017) Our team at The University of California, Berkeley, is uniquely positioned to provide such an education. Spearheaded by Professor Mark van der Laan, and spreading rapidly by many of his students and colleagues who have greatly enriched the field, the aptly named “Targeted Learning” methodology targets the scientific question at hand and is counter to the current culture of “convenience statistics” which opens the door to biased estimation, misleading results, and false discoveries. Targeted Learning restores the fundamentals that formalized the field of statistics, such as the that facts that a statistical model represents real knowledge about the experiment that generated the data, and a target parameter represents what we are seeking to learn from the data as a feature of the distribution that generated it (van der Laan and Starmans 2014). In this way, Targeted Learning defines a truth and establishes a principled standard for estimation, thereby inhibiting these all-too-human biases (e.g., hindsight bias, confirmation bias, and outcome bias) from infiltrating analysis. “The key for effective classical [statistical] inference is to have well-defined questions and an analysis plan that tests those questions.” — Nosek et al. (2018) Our objective is to provide training to students, researchers, industry professionals, faculty in science, public health, statistics, and other fields to empower them with the necessary knowledge and skills to utilize the sound methodology of Targeted Learning — a technique that provides tailored pre-specified machines for answering queries, so that each data analysis is completely reproducible, and estimators are efficient, minimally biased, and provide formal statistical inference. Just as the conscientious use of modern statistical methodology is necessary to ensure that scientific practice thrives, it remains critical to acknowledge the role that robust software plays in allowing practitioners direct access to published results. We recall that “an article…in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures,” thus making the availability and adoption of robust statistical software key to enhancing the transparency that is an inherent aspect of science (Buckheit and Donoho 1995). For a statistical methodology to be readily accessible in practice, it is crucial that it is accompanied by robust user-friendly software (Pullenayegum et al. 2016; Stromberg and others 2004). The tlverse software ecosystem was developed to fulfill this need for the Targeted Learning methodology. Not only does this software facilitate computationally reproducible and efficient analyses, it is also a tool for Targeted Learning education since its workflow mirrors that of the methodology. In particular, the tlverse paradigm does not focus on implementing a specific estimator or a small set of related estimators. Instead, the focus is on exposing the statistical framework of Targeted Learning itself — all R packages in the tlverse ecosystem directly model the key objects defined in the mathematical and theoretical framework of Targeted Learning. What’s more, the tlverse R packages share a core set of design principles centered on extensibility, allowing for them to be used in conjunction with each other and built upon one other in a cohesive fashion. In this workshop, the reader will embark on a journey through the tlverse ecosystem. Guided by R programming exercises, case studies, and intuitive explanation readers will build a toolbox for applying the Targeted Learning statistical methodology, which will translate to real-world causal inference analyses. Participants need not be a fully trained statistician to begin understanding and applying these methods. However, it is highly recommended for participants to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. We also recommend an understanding of introductory causal inference. For introductory materials for learning the R programming language we recommend the following free resources: Software Carpentry’s Programming with R Software Carpentry’s R for Reproducible Scientific Analysis Grolemund and Wickham’s R for Data Science For causal inference learning materials we recommend the following resources: Hernán MA, Robins JM (2019). Causal Inference. Jason A. Roy’s coursera Course A Crash Course in Causality: Inferring Causal Effects from Observational Data References "],
["tlverse.html", "Chapter 1 Welcome to the tlverse 1.1 Learning Objectives 1.2 What is the tlverse? 1.3 tlverse components 1.4 Installation", " Chapter 1 Welcome to the tlverse 1.1 Learning Objectives Understand the tlverse ecosystem conceptually Identify the core components of the tlverse Install tlverse R packages Understand the Targeted Learning roadmap Learn about the WASH Benefits example data 1.2 What is the tlverse? The tlverse is a new framework for doing Targeted Learning in R, inspired by the tidyverse ecosystem of R packages. By analogy to the tidyverse: The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. So, the tlverse is an opinionated collection of R packages for Targeted Learning sharing an underlying philosophy, grammar, and set of data structures 1.3 tlverse components These are the main packages that represent the core of the tlverse: sl3: Modern Super Learning with Pipelines What? A modern object-oriented re-implementation of the Super Learner algorithm, employing recently developed paradigms for R programming. Why? A design that leverages modern tools for fast computation, is forward-looking, and can form one of the cornerstones of the tlverse. tmle3: An Engine for Targeted Learning What? A generalized framework that simplifies Targeted Learning by identifying and implementing a series of common statistical estimation procedures. Why? A common interface and engine that accommodates current algorithmic approaches to Targeted Learning and is still flexible enough to remain the engine even as new techniques are developed. In addition to the engines that drive development in the tlverse, there are some supporting packages – in particular, we have two… origami: A Generalized Framework for Cross-Validation What? A generalized framework for flexible cross-validation Why? Cross-validation is a key part of ensuring error estimates are honest and preventing overfitting. It is an essential part of the both the Super Learner algorithm and Targeted Learning. delayed: Parallelization Framework for Dependent Tasks What? A framework for delayed computations (futures) based on task dependencies. Why? Efficient allocation of compute resources is essential when deploying large-scale, computationally intensive algorithms. A key principle of the tlverse is extensibility. That is, we want to support new Targeted Learning estimators as they are developed. The model for this is new estimators are implemented in additional packages using the core packages above. There are currently two featured examples of this: tmle3mopttx: Optimal Treatments in tlverse What? Learn an optimal rule and estimate the mean outcome under the rule Why? Optimal Treatment is a powerful tool in precision healthcare and other settings where a one-size-fits-all treatment approach is not appropriate. tmle3shift: Shift Interventions in tlverse What? Shift interventions for continuous treatments Why? Not all treatment variables are discrete. Being able to estimate the effects of continuous treatment represents a powerful extension of the Targeted Learning approach. 1.4 Installation The tlverse ecosystem of packages are currently hosted at https://github.com/tlverse, not yet on CRAN. You can use the devtools package to install them: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tlverse/tlverse&quot;) The tlverse depends on a large number of other packages that are also hosted on GitHub. Because of this, you may see the following error: Error: HTTP error 403. API rate limit exceeded for 71.204.135.82. (But here&#39;s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.) Rate limit remaining: 0/60 Rate limit reset at: 2019-03-04 19:39:05 UTC To increase your GitHub API rate limit - Use `usethis::browse_github_pat()` to create a Personal Access Token. - Use `usethis::edit_r_environ()` and add the token as `GITHUB_PAT`. This just means that R tried to install too many packages from GitHub in too short of a window. To fix this, you need to tell R how to use GitHub as your user (you’ll need a GitHub user account). Follow these two steps: Type usethis::browse_github_pat() in your R console, which will direct you to GitHub’s page to create a New Personal Access Token. Create a Personal Access Token simply by clicking “Generate token” at the bottom of the page. Copy your Personal Access Token, a long string of lowercase letters and numbers. Type usethis::edit_r_environ() in your R console, which will open your ‘.Renviron’ file in the source window of RStudio. In your ‘.Renviron’ file, type “GITHUB_PAT=” and then paste your Personal Access Token after the equals symbol with no space. In your ‘.Renviron’ file, press the enter key to ensure that your ‘.Renviron’ ends with a newline. Save your ‘.Renviron’ file. Restart R for changes to take effect. You can restart R via the drop-down menu on the “Session” tab. The “Session” tab is at the top of the RStudio interface. After following these steps, you should be able to successfully install the package which threw the error above. hand-washing— output: html_document editor_options: chunk_output_type: console — "],
["intro.html", "Chapter 2 The Targeted Learning Roadmap 2.1 The Statistical Model 2.2 The Causal Model 2.3 The Parameter of Interest 2.4 Identifiability 2.5 Estimators: SuperLearning and Targeted Maximum Likelihood 2.6 The WASH Benefits Example Dataset", " Chapter 2 The Targeted Learning Roadmap A central goal of the Targeted Learning statistical paradigm is to estimate scientifically relevant parameters in realistic (usually nonparametric) models and to do so with finite-sample robustness and consistent inference. 2.1 The Statistical Model Assume we have an i.i.d. sample of confounders, a binary intervention of interest, and an outcome, or are observed data is \\[ O = (W, A, Y).\\] The distribution of the observed data may be factorized as follows: \\[P(O) = P(W, A, Y) = P(W)P (A \\mid W) P(Y \\mid A, W).\\] To estimate a parameter of interest, a researcher need not necessarily be able to specify these whole or conditional distributions. Rather, each estimator only requires that certain parts of the distribution be known; for example, some may require estimates of \\(\\mathbb{E}(Y \\mid A, W)\\), the mean of \\(Y\\) within subgroups \\((A, W)\\), or the regression of the outcome on the exposure and confounders. At this stage in the roadmap, the researcher must specify a choice of statistical model to be used in estimating \\(\\mathbb{E}(Y \\mid A, W)\\) or other elements of the probability distribution needed to estimate the parameter of interest. Here, statistical model means any constraints on the model form that may be imposed by knowledge about the data-generating process – that is, known aspects of how the data were generated. Typically, the true model is a very large model, placing few constraints, if any, on the data-generating distribution, or a semi-parametric model. With few constraints on the data-generating distribution, and a potentially large number of covariates, data-adaptive, machine-learning approaches remain the only practical option for estimating components of the likelihood. The remainder of this course concerns how to do this as efficiently and robustly as possible, depending on the goal of the analysis. 2.2 The Causal Model The next step in the roadmap is to use a causal framework to formalize the experiment and thereby define the parameter of interest. Causal graphs are one useful tool to express what we know about the causal relations among variables that are relevant to the question under study (Pearl 2009). Ignoring error terms, we will assume the following ordering of the variables in \\(O\\). While directed acyclic graphs (DAGs) like above provide a convenient means by which to visualize causal relations between variables, the causal relations among variables can be represented via a set of structural equations: \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= f_A(W, U_A) \\\\ Y &amp;= f_Y(W, A, U_Y), \\end{align*}\\] where \\(U_W\\), \\(U_A\\), and \\(U_Y\\) represent the unmeasured exogenous background characteristics that influence the value of each variable. In the NPSEM, \\(f_W\\), \\(f_A\\) and \\(f_Y\\) denote that each variable (for \\(W\\), \\(A\\) and \\(Y\\), respectively) is a function of its parents and unmeasured background characteristics, but one typically has little information about particular functional constraints (e.g., linear, logit-linear, only one interaction, etc.). For this reason, they are called non-parametric structural equation models (NPSEMs). The DAG and set of nonparametric structural equations represent exactly the same information and so may be used interchangeably. 2.3 The Parameter of Interest The first hypothetical experiment we will consider is assigning exposure to the whole population and observing the outcome, and then assigning no exposure to the whole population and observing the outcome. On the nonparametric structural equations, this corresponds to a comparison of the outcome distribution in the population under two interventions: \\(A\\) is set to \\(1\\) for all individuals, and \\(A\\) is set to \\(0\\) for all individuals. These interventions imply two new nonparametric structural equation models. For the case \\(A = 1\\), we have \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 1 \\\\ Y(1) &amp;= f_Y(W, 1, U_Y), \\end{align*}\\] and for the case \\(A=0\\), \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 0 \\\\ Y(1) &amp;= f_Y(W, 0, U_Y). \\end{align*}\\] In these equations, \\(A\\) is no longer a function of \\(W\\) because we have intervened on the system, setting \\(A\\) deterministically to either of the values \\(1\\) or \\(0\\). The new symbols \\(Y(1)\\) and \\(Y(0)\\) indicate the outcome variable in our population if it were generated by the respective NPSEMs above; these are often called counterfactuals. The difference between the means of the outcome under these two interventions defines a parameter that is often called the “average treatment effect” (ATE), denoted \\[\\begin{equation}\\label{eqn:ate} ATE = \\mathbb{E}_X(Y(1)-Y(0)), \\end{equation}\\] where \\(\\mathbb{E}_X\\) is the mean under the theoretical (unobserved) full data \\(X = (W, Y(1), Y(0))\\). Note, we can define much more complicated interventions on NPSEM’s, such as interventions based upon rules (themselves based upon covariates), stochastic rules, etc. and each results in a different targeted parameter and entails different identifiability assumptions discussed below. 2.4 Identifiability Because we can never observe both \\(Y(0)\\) (the counterfactual outcome when \\(A=0\\)) and \\(Y(1)\\), we cannot estimate directly. Instead, we have to make assumptions under which this quantity may be estimated from the observed data \\(O \\sim P_0\\) under the data-generating distribution \\(P_0\\). Fortunately, given the causal model specified in the NPSEM above, we can, with a handful of untestable assumptions, estimate the ATE, even from observational data. These assumptions may be summarized as follows The causal graph implies \\(Y(a) \\perp A\\) for all \\(a \\in \\mathcal{A}\\), which is the randomization assumption. In the case of observational data, the analogous assumption is strong ignorability or no unmeasured confounding \\(Y(a) \\perp A \\mid W\\) for all \\(a \\in \\mathcal{A}\\); Although not represented in the causal graph, also required is the assumption of no interference between units, that is, the outcome for unit \\(i\\) \\(Y_i\\) is not affected by exposure for unit \\(j\\) \\(A_j\\) unless \\(i=j\\); Consistency of the treatment mechanism is also required, i.e., the outcome for unit \\(i\\) is \\(Y_i(a)\\) whenever \\(A_i = a\\), an assumption also known as “no other versions of treatment”; It is also necessary that all observed units, across strata defined by \\(W\\), have a bounded (non-deterministic) probability of receiving treatment – that is, \\(0 &lt; P_0(A = a \\mid W) &lt; 1\\) for all \\(a\\) and \\(W\\). This assumption is referred to as positivity. Remark: Together, (2) and (3), the assumptions of no interference and consistency, respectively, are jointly referred to as the stable unit treatment value assumption (SUTVA). Given these assumptions, the ATE may be re-written as a function of \\(P_0\\), specifically \\[\\begin{equation}\\label{eqn:estimand} ATE = \\mathbb{E}_0(Y(1) - Y(0)) = \\mathbb{E}_0 \\left(\\mathbb{E}_0[Y \\mid A = 1, W] - \\mathbb{E}_0[Y \\mid A = 0, W]\\right), \\end{equation}\\] or the difference in the predicted outcome values for each subject, under the contrast of treatment conditions (\\(A = 0\\) vs. \\(A = 1\\)), in the population, averaged over all observations. Thus, a parameter of a theoretical “full” data distribution can be represented as an estimand of the observed data distribution. Significantly, there is nothing about the representation in that requires parametric assumptions; thus, the regressions on the right hand side may be estimated freely with machine learning. With different parameters, there will be potentially different identifiability assumptions and the resulting estimands can be functions of different components of \\(P_0\\). We discuss several more complex estimands in later sections of this workshop. 2.5 Estimators: SuperLearning and Targeted Maximum Likelihood Although we will discuss more in later sections, the goals of the estimators we desire should be that, among sensible (asymptotically consistent, regular) estimators, the estimator be asymptotically efficient in the statistical model of interest, and the estimator can be constructed for finite-sample performance improvements, relative to other estimators in the same class. These principles guide our approach to estimation: Super Learning for prediction (more generally density estimation) and TMLE for estimation of our intervention parameters of interest. 2.5.1 SuperLearning There is no universally optimal machine learning algorithm for density estimation or prediction. When we have tested different algorithms on actual data and looked at the performance (e.g., MSE of prediction), never does one algorithm always win (see below). For some data, one needs learners that can model a complex function. For others, typically the result of noise or insufficient sample size, a simple, parametric model might fit best. SuperLearner, an ensemble learner, solves this issue, by allowing a convex combination of learners from the simplest (intercept-only) to most complex (neural nets, random forests, SVM, etc). It works by using cross-validation in a manner which guarantees that the resulting fit will be as good as possible, given the learners provided (note, even a convex combination of poor learners can sometimes result in good fit, though better to have good candidates). knitr::include_graphics(&quot;img/misc/vs.pdf&quot;) The figure above shows an example of 10-fold cross-validation. The schematic below is a visualization of the following algorithm: Break up the sample evenly into V-folds (say V=10). For each of these 10 folds, remove that portion of the sample (kept out as validation sample) and the remaining will be used to fit learners (training sample). Fit each learner on the training sample (note, some learners will have their own internal cross-validation procedure or other methods to select tuning parameters). For each observation in the corresponding training sample, predict the outcome using each of the learners, so if there are \\(p\\) learners, then where would be \\(p\\) predictions on each of the observations in validation sample). Take out another validation sample and repeat until each of the V-sets of data are removed. Compare the cross-validated fit of the learners across all observations based on specified loss function (e.g., squared error, negative log-likelihood, …) by calculating the corresponding average loss (risk). Either: choose the learner with smallest risk and apply that learner to entire data set (resulting SL fit), do a weighted average of the learners to minimize the cross-validated risk (construct an ensemble of learners), by re-fitting the learners on the original data set, and use the weights above to get the file SL fit. Note, this entire procedure can be itself cross-validated to get a consistent estimate of the future performance of the SL fit. knitr::include_graphics(&quot;img/misc/SLKaiserNew.pdf&quot;) For prediction, one can use the cross-validated risk to empirically determine the relative performance of SL and competing methods. Below shows the results of such a study, comparing the fits of several different learners, including the SL algorithms. knitr::include_graphics(&quot;img/misc/ericSL.pdf&quot;) 2.5.2 Substitution Estimators Beyond a fit of the prediction function, one might also want to estimate more targeted parameters specific to certain scientific questions. The approach is to plug into the estimand of interest estimates of the relevant distributions. Sometimes, we can use simple empirical distributions, but averaging some function over the observations (e.g., giving weight \\(1/n\\) for all observations). Other parts of the distribution, like conditional means or probabilities, the estimate will require some sort of smoothing due to the curse of dimensionality. We give one example using an example of the average treatment effect (see above): \\(\\Psi(P_0) = \\Psi(Q_0) = \\mathbb{E}_0 \\big[\\mathbb{E}_0[Y \\mid A = 1, W] - \\mathbb{E}_0[Y \\mid A = 0, W]\\big]\\), where \\(Q_0\\) represents both the distribution of \\(Y \\mid A,W\\) and distribution of \\(W\\). Let \\(\\bar{Q}_0(A,W) \\equiv E_0(Y \\mid A,W)\\) and \\(Q_{0,W}(w) = P_0 (W=w)\\), then \\[ \\Psi(Q_0) = \\sum_w \\{ \\bar{Q}_0(1,w)-\\bar{Q}_0(0,w)\\} Q_{0,W}(w) \\] The Substitution Estimator plugs in the empirical distribution (weight \\(1/n\\) for each observation) for \\(Q_{0,W}(W_i)\\), and some estimate of the regression of \\(Y\\) on \\((A,W)\\) (say SL fit): \\[ \\Psi(Q_n) = \\frac{1}{n} \\sum_{i=1}^n \\{ \\bar{Q}_n(1,W_i)-\\bar{Q}_n(0,W_i)\\} \\] Thus, it becomes the average of the differences in predictions from the fit keeping the observed \\(W\\), but first replacing \\(A=1\\) and then the same but all \\(A=0\\). 2.5.3 TMLE Though using SL over an arbitrary parametric regression is an improvement, it’s not sufficient to have the properties of an estimator one needs for rigorous inference. Because the variance-bias trade-off in the SL is focused on the prediction model, it can, for instance, under-fit portions of the distributions that are critical for estimating the parameter of interest, \\(\\Psi(P_0)\\). TMLE keeps the benefits of substitution estimators (it is one), but augments the original estimates to correct for this issue and also results in an asymptotically linear (and thus normally-distributed) estimator with consistent Wald-style confidence intervals. Produces a well-defined, unbiased, efficient substitution estimator of target parameters of a data-generating distribution. Updates an initial (super learner) estimate of the relevant part of the data-generating distribution possibly using an estimate of a nuisance parameter (like the model of intervention given covariates). Removes asymptotic residual bias of initial estimator for the target parameter, if it uses a consistent estimator of \\(g_0\\). If initial estimator was consistent for the target parameter, the additional fitting of the data in the targeting step may remove finite sample bias, and preserves consistency property of the initial estimator. If the initial estimator and the estimator of \\(g_0\\) are both consistent, then it is also asymptotically efficient according to semi-parametric statistical model efficiency theory. Thus, every effort is made to achieve minimal bias and the asymptotic semi-parametric efficiency bound for the variance. knitr::include_graphics(&quot;img/misc/TMLEimage.pdf&quot;) There are different types of TMLE, sometimes for the same set of parameters, but below is an example of the algorithm for estimating the ATE. In this case, one can present the estimator as: \\[ \\Psi(Q^*_n) = \\frac{1}{n} \\sum_{i=1}^n \\{ \\bar{Q}^*_n(1,W_i)-\\bar{Q}^*_n(0,W_i)\\} \\] where \\(\\bar{Q}^*_n(A,W)\\) is the TMLE augmented estimate. \\(f(\\bar{Q}^*_n(A,W)) = f(\\bar{Q}_n(A,W)) + \\epsilon_n * h_n(A,W)\\), where \\(f(\\cdot)\\) is the appropriate link function (e.g., logit), \\(\\epsilon_n\\) is an estimated coefficient and \\(h_n(A,W)\\) is a “clever covariate”. In this case, \\(h_n(A,W) = \\frac{A}{g_n(W)}-\\frac{1-A}{1-g_n(W)}\\), with \\(g_n(W) = P_n(A=1 \\mid W)\\) being the estimated (also by SL) propensity score, so the estimator depends both on initial SL fit of the outcome regression (\\(\\bar{Q}_0\\)) and an SL fit of the propensity score (\\(g_n\\)). There are further robust augmentations that are used in tlverse, such as an added layer of cross-validation to avoid over-fitting bias (CV-TMLE), and so called methods that can more robustly estimated several parameters simultaneously (e.g., the points on a survival curve). 2.5.4 Inference The estimators we discuss are asymptotically linear, meaning that the difference in the estimate \\(\\Psi(P_n)\\) and the true parameter (\\(\\Psi(P_0)\\)) can be represented in first order by a i.i.d. sum: \\[\\begin{equation}\\label{eqn:IC} \\Psi(P_n) - \\Psi(P_0) = \\frac{1}{n} IC(O_i; \\nu) + o_p(1/\\sqrt{n}) \\end{equation}\\] where \\(IC(O_i; \\nu)\\) (the influence curve or function) is a function of the data and possibly other nuisance parameters \\(\\nu\\). Importantly, such estimators have mean-zero Gaussian limiting distributions; thus, in the univariate case, one has that \\[\\begin{equation}\\label{eqn:limit_dist} \\sqrt{n}(\\Psi(P_n) - \\Psi(P_0)) = N(0, (IC(O_i; \\nu))^2), \\end{equation}\\] so that inference for the estimator of interest may be obtained in terms of the influence function. For this simple case, a 95% confidence interval may be derived as: \\[\\begin{equation}\\label{eqn:CI} \\Psi(P^{\\star}_n) \\pm 1.96 \\sqrt{\\frac{\\hat{\\sigma}^2}{n}}, \\end{equation}\\] where \\(SE=\\sqrt{\\frac{\\hat{\\sigma}^2}{n}}\\) and \\(\\hat{\\sigma}^2\\) is the sample variance of the estimated IC’s: \\(IC(O; \\hat{\\nu})\\). One can use the functional delta method to derive the influence curve if a parameter of interest may be written as a function of other asymptotically linear estimators. Thus, we can derive robust inference for parameters that are estimated by fitting complex, machine learning algorithms and these methods are computationally quick (do not rely on re-sampling based methods like the bootstrap). 2.6 The WASH Benefits Example Dataset The data come from a study of the effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh (WASH Benefits Bangladesh): a cluster-randomised controlled trial (“Temporary,” n.d.). The study enrolled pregnant women in their first or second trimester from the rural villages of Gazipur, Kishoreganj, Mymensingh, and Tangail districts of central Bangladesh, with an average of eight women per cluster. Groups of eight geographically adjacent clusters were block-randomised, using a random number generator, into six intervention groups (all of which received weekly visits from a community health promoter for the first 6 months and every 2 weeks for the next 18 months) and a double-sized control group (no intervention or health promoter visit). The six intervention groups were: chlorinated drinking water; improved sanitation; hand-washing with soap; combined water, sanitation, and hand washing; improved nutrition through counseling and provision of lipid-based nutrient supplements; and combined water, sanitation, handwashing, and nutrition. In the workshop, we concentrate on child growth (size for age) as the outcome of interest. For reference, this trial was registered with ClinicalTrials.gov as NCT01590095. library(tidyverse) # read in data dat &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;) dat # A tibble: 4,695 x 28 whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; 1 0 Cont… N05265 9 268 male 30 Prima… 146. Food S… 3 2 -1.16 Cont… N05265 9 286 male 25 Prima… 149. Modera… 2 3 -1.05 Cont… N08002 9 264 male 25 Prima… 152. Food S… 1 4 -1.26 Cont… N08002 9 252 fema… 28 Prima… 140. Food S… 3 5 -0.59 Cont… N06531 9 336 fema… 19 Secon… 151. Food S… 2 6 -0.51 Cont… N06531 9 304 male 20 Secon… 154. Severe… 0 7 -2.46 Cont… N08002 9 336 fema… 19 Prima… 151. Food S… 2 8 -0.6 Cont… N06528 9 312 fema… 25 No ed… 142. Food S… 2 9 -0.23 Cont… N06528 9 322 male 30 Secon… 153. Food S… 1 10 -0.14 Cont… N06453 9 376 male 30 No ed… 156. Modera… 2 # … with 4,685 more rows, and 17 more variables: Ncomp &lt;dbl&gt;, watmin &lt;dbl&gt;, # elec &lt;dbl&gt;, floor &lt;dbl&gt;, walls &lt;dbl&gt;, roof &lt;dbl&gt;, asset_wardrobe &lt;dbl&gt;, # asset_table &lt;dbl&gt;, asset_chair &lt;dbl&gt;, asset_khat &lt;dbl&gt;, asset_chouki &lt;dbl&gt;, # asset_tv &lt;dbl&gt;, asset_refrig &lt;dbl&gt;, asset_bike &lt;dbl&gt;, asset_moto &lt;dbl&gt;, # asset_sewmach &lt;dbl&gt;, asset_mobile &lt;dbl&gt; For the purposes of this workshop, we we start by treating the data as independent and identically distributed (i.i.d.) random draws from a very large target population. We could, with available options, account for the clustering of the data (within sampled geographic units), but, for simplification, we avoid these details in these workshop presentations, although modifications of our methodology for biased samples, repeated measures, etc., are available. We have 28 variables measured, of which 1 variable is set to be the outcome of interest. This outcome, \\(Y\\), is the weight-for-height Z-score (whz in dat); the treatment of interest, \\(A\\), is the randomized treatment group (tr in dat); and the adjustment set, \\(W\\), consists simply of everything else. This results in our observed data structure being \\(n\\) i.i.d. copies of \\(O_i = (W_i, A_i, Y_i)\\), for \\(i = 1, \\ldots, n\\). Using the skimr package, we can quickly summarize the variables measured in the WASH Benefits data set: library(skimr) skim(dat) Skim summary statistics n obs: 4695 n variables: 28 ── Variable type:character ───────────────────────────────────────────────────── variable missing complete n min max empty n_unique fracode 0 4695 4695 2 6 0 20 hfiacat 0 4695 4695 11 24 0 4 momedu 0 4695 4695 12 15 0 3 sex 0 4695 4695 4 6 0 2 tr 0 4695 4695 3 15 0 7 ── Variable type:numeric ─────────────────────────────────────────────────────── variable missing complete n mean sd p0 p25 p50 p75 aged 0 4695 4695 266.32 52.17 42 230 266 303 asset_bike 0 4695 4695 0.32 0.47 0 0 0 1 asset_chair 0 4695 4695 0.73 0.44 0 0 1 1 asset_chouki 0 4695 4695 0.78 0.41 0 1 1 1 asset_khat 0 4695 4695 0.61 0.49 0 0 1 1 asset_mobile 0 4695 4695 0.86 0.35 0 1 1 1 asset_moto 0 4695 4695 0.066 0.25 0 0 0 0 asset_refrig 0 4695 4695 0.079 0.27 0 0 0 0 asset_sewmach 0 4695 4695 0.065 0.25 0 0 0 0 asset_table 0 4695 4695 0.73 0.44 0 0 1 1 asset_tv 0 4695 4695 0.3 0.46 0 0 0 1 asset_wardrobe 0 4695 4695 0.17 0.37 0 0 0 0 elec 0 4695 4695 0.6 0.49 0 0 1 1 floor 0 4695 4695 0.11 0.31 0 0 0 0 momage 18 4677 4695 23.91 5.24 14 20 23 27 momheight 31 4664 4695 150.5 5.23 120.65 147.05 150.6 154.06 month 0 4695 4695 6.45 3.33 1 4 6 9 Ncomp 0 4695 4695 11.04 6.35 2 6 10 14 Nlt18 0 4695 4695 1.6 1.25 0 1 1 2 roof 0 4695 4695 0.99 0.12 0 1 1 1 walls 0 4695 4695 0.72 0.45 0 0 1 1 watmin 0 4695 4695 0.95 9.48 0 0 0 1 whz 0 4695 4695 -0.59 1.03 -4.67 -1.28 -0.6 0.08 p100 hist 460 ▁▁▂▇▇▅▁▁ 1 ▇▁▁▁▁▁▁▃ 1 ▃▁▁▁▁▁▁▇ 1 ▂▁▁▁▁▁▁▇ 1 ▅▁▁▁▁▁▁▇ 1 ▁▁▁▁▁▁▁▇ 1 ▇▁▁▁▁▁▁▁ 1 ▇▁▁▁▁▁▁▁ 1 ▇▁▁▁▁▁▁▁ 1 ▃▁▁▁▁▁▁▇ 1 ▇▁▁▁▁▁▁▃ 1 ▇▁▁▁▁▁▁▂ 1 ▆▁▁▁▁▁▁▇ 1 ▇▁▁▁▁▁▁▁ 60 ▅▇▅▂▁▁▁▁ 168 ▁▁▁▂▇▇▂▁ 12 ▅▃▇▃▂▇▃▅ 52 ▇▇▃▁▁▁▁▁ 10 ▇▃▂▁▁▁▁▁ 1 ▁▁▁▁▁▁▁▇ 1 ▃▁▁▁▁▁▁▇ 600 ▇▁▁▁▁▁▁▁ 4.97 ▁▁▅▇▃▁▁▁ A convenient summary of the relevant variables is given just above, complete with a small visualization describing the marginal characteristics of each covariate. Note that the asset variables reflect socio-economic status of the study participants. Notice also the uniform distribution of the treatment groups (with twice as many controls); this is, of course, by design. References "],
["ensemble-machine-learning.html", "Chapter 3 Ensemble Machine Learning 3.1 Learning Objectives 3.2 Introduction 3.3 Basic sl3 Implementation 3.4 Extensions 3.5 Exercise 3.6 Summary", " Chapter 3 Ensemble Machine Learning Rachael Phillips Based on the sl3 R package by Jeremy Coyle, Nima Hejazi, Ivana Malenica, and Oleg Sofrygin. Updated: 2019-05-22 3.1 Learning Objectives By the end of this lesson you will be able to: Assemble an ensemble of learners based on the properties that identify what features they support. Customize learner hyperparameters to incorporate a diversity of different settings. Select a subset of available covariates and pass only those variables to the modeling algorithm. Fit an ensemble with nested cross-validation to obtain an estimate of the performance of the ensemble itself. Calculate sl3 variable importance metrics. Interpret the discrete and continuous super learner fits. Rationalize the need to remove bias from the super learner to make an optimal bias-variance tradeoff for the parameter of interest. 3.2 Introduction Now that we have defined the statistical estimation problem in The Targeted Learning Roadmap, we are ready construct the TMLE; an asymptotically efficient substitution estimator of this target quantity. The first step in this estimation procedure is an initial estimate of the data-generating distribution, or the relevant part of this distribution that is needed to evaluate the target parameter. For this initial estimation, we use the super learner (Van der Laan, Polley, and Hubbard 2007), an important step for creating a robust estimator. Super Learner Loss-function-based tool that uses V-fold cross-validation to obtain the best prediction of the relevant part of the likelihood that’s needed to evaluate target parameter. Requires expressing the estimand as the minimizer of an expected loss, and proposing a library of algorithms (“learners” in sl3 nomenclature) that we think might be consistent with the true data-generating distribution. Proven to be asymptotically as accurate as the best possible prediction algorithm that is tested (van der Laan and Dudoit 2003; Van der Vaart, Dudoit, and Laan 2006). The discrete super learner, or cross-validated selector, is the algorithm in the library that minimizes the V-fold cross-validated empirical risk. The continuous super learner is a weighted average of the library of algorithms, where the weights are chosen to minimize the V-fold cross-validated empirical risk of the library. Restricting the weights (“metalearner” in sl3 nomenclature) to be positive and sum to one (convex combination) has been shown to improve upon the discrete super learner (Polley and Van Der Laan 2010; Van der Laan, Polley, and Hubbard 2007). This background material is described in greater detail in the accompanying tlverse handbook sl3 chapter. 3.3 Basic sl3 Implementation We begin by illustrating the core functionality of the super learner algorithm as implemented in sl3. The sl3 implementation consists of the following steps: Load the necessary libraries and data Define the machine learning task Make a super learner by creating library of base learners and a metalearner Train the super learner on the machine learning task Obtain predicted values WASH Benefits Study Example Using the WASH data, we are interested in predicting weight-for-height z-score whz using the available covariate data. 0. Load the necessary libraries and data library(kableExtra) library(knitr) library(skimr) library(tidyverse) library(data.table) library(sl3) library(SuperLearner) library(origami) set.seed(7194) # load data set and take a peek washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) head(washb_data) %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;250px&quot;) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp watmin elec floor walls roof asset_wardrobe asset_table asset_chair asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto asset_sewmach asset_mobile 0.00 Control N05265 9 268 male 30 Primary (1-5y) 146.40 Food Secure 3 11 0 1 0 1 1 0 1 1 1 0 1 0 0 0 0 1 -1.16 Control N05265 9 286 male 25 Primary (1-5y) 148.75 Moderately Food Insecure 2 4 0 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 -1.05 Control N08002 9 264 male 25 Primary (1-5y) 152.15 Food Secure 1 10 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 -1.26 Control N08002 9 252 female 28 Primary (1-5y) 140.25 Food Secure 3 5 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 -0.59 Control N06531 9 336 female 19 Secondary (&gt;5y) 150.95 Food Secure 2 7 0 1 0 1 1 1 1 1 1 1 0 0 0 0 0 1 -0.51 Control N06531 9 304 male 20 Secondary (&gt;5y) 154.20 Severely Food Insecure 0 3 1 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1. Define the machine learning task To define the machine learning “task” (predict weight-for-height z-score whz using the available covariate data), we need to create an sl3_Task object. The sl3_Task keeps track of the roles the variables play in the machine learning problem, the data, and any metadata (e.g., observational-level weights, id, offset). # specify the outcome and covariates outcome &lt;- &quot;whz&quot; covars &lt;- colnames(washb_data)[-which(names(washb_data) == outcome)] # create the sl3 task washb_task &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome ) Warning in .subset2(public_bind_env, &quot;initialize&quot;)(...): Missing Covariate Data Found. Imputing covariates using sl3_process_missing # examine the task washb_task A sl3 Task with 4695 obs and these nodes: $covariates [1] &quot;tr&quot; &quot;fracode&quot; &quot;month&quot; &quot;aged&quot; [5] &quot;sex&quot; &quot;momage&quot; &quot;momedu&quot; &quot;momheight&quot; [9] &quot;hfiacat&quot; &quot;Nlt18&quot; &quot;Ncomp&quot; &quot;watmin&quot; [13] &quot;elec&quot; &quot;floor&quot; &quot;walls&quot; &quot;roof&quot; [17] &quot;asset_wardrobe&quot; &quot;asset_table&quot; &quot;asset_chair&quot; &quot;asset_khat&quot; [21] &quot;asset_chouki&quot; &quot;asset_tv&quot; &quot;asset_refrig&quot; &quot;asset_bike&quot; [25] &quot;asset_moto&quot; &quot;asset_sewmach&quot; &quot;asset_mobile&quot; &quot;delta_momage&quot; [29] &quot;delta_momheight&quot; $outcome [1] &quot;whz&quot; $id NULL $weights NULL $offset NULL 2. Make a super learner Now that we have defined our machine learning problem with the task, we are ready to “make” the super learner. This requires specification of Base learning algorithms, to establish a library of learners that we think might be consistent with the true data-generating distribution. Metalearner, to ensemble the base learners. We might also incorporate Feature selection, to pass only a subset of the predictors to the algorithm. Hyperparameter specification, to tune base learners. Learners have properties that indicate what features they support. We may use sl3_list_properties() to get a list of all properties supported by at least one learner. sl3_list_properties() [1] &quot;binomial&quot; &quot;categorical&quot; &quot;continuous&quot; [4] &quot;cv&quot; &quot;density&quot; &quot;ids&quot; [7] &quot;multivariate_outcome&quot; &quot;offset&quot; &quot;preprocessing&quot; [10] &quot;timeseries&quot; &quot;weights&quot; &quot;wrapper&quot; Since we have a continuous outcome, we may identify the learners that support this outcome type with sl3_list_learners(). sl3_list_learners(c(&quot;continuous&quot;)) [1] &quot;Lrnr_arima&quot; &quot;Lrnr_bartMachine&quot; [3] &quot;Lrnr_bilstm&quot; &quot;Lrnr_condensier&quot; [5] &quot;Lrnr_dbarts&quot; &quot;Lrnr_expSmooth&quot; [7] &quot;Lrnr_glm&quot; &quot;Lrnr_glm_fast&quot; [9] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [11] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [13] &quot;Lrnr_hal9001&quot; &quot;Lrnr_HarmonicReg&quot; [15] &quot;Lrnr_lstm&quot; &quot;Lrnr_mean&quot; [17] &quot;Lrnr_nnls&quot; &quot;Lrnr_optim&quot; [19] &quot;Lrnr_pkg_SuperLearner&quot; &quot;Lrnr_pkg_SuperLearner_method&quot; [21] &quot;Lrnr_pkg_SuperLearner_screener&quot; &quot;Lrnr_randomForest&quot; [23] &quot;Lrnr_ranger&quot; &quot;Lrnr_rpart&quot; [25] &quot;Lrnr_rugarch&quot; &quot;Lrnr_solnp&quot; [27] &quot;Lrnr_stratified&quot; &quot;Lrnr_svm&quot; [29] &quot;Lrnr_tsDyn&quot; &quot;Lrnr_xgboost&quot; Now that we have an idea of some learners, we can construct them using the make_learner function. # choose base learners lrnr_glm &lt;- make_learner(Lrnr_glm) lrnr_mean &lt;- make_learner(Lrnr_mean) lrnr_glmnet &lt;- make_learner(Lrnr_glmnet) We can customize learner hyperparameters to incorporate a diversity of different settings. Documentation for the learners and their hyperparameters can be found in the sl3 Learners Reference. We can also include learners from the SuperLearner R package. lrnr_ranger100 &lt;- make_learner(Lrnr_ranger, num.trees = 100) lrnr_hal_simple &lt;- make_learner(Lrnr_hal9001, degrees = 1, n_folds = 2) lrnr_gam &lt;- Lrnr_pkg_SuperLearner$new(&quot;SL.gam&quot;) lrnr_bayesglm &lt;- Lrnr_pkg_SuperLearner$new(&quot;SL.bayesglm&quot;) In order to assemble the library of learners, we need to “stack” them together. A Stack is a special learner and it has the same interface as all other learners. What makes a stack special is that it combines multiple learners by training them simultaneously, so that their predictions can be either combined or compared. stack &lt;- make_learner( Stack, lrnr_glm, lrnr_mean, lrnr_ranger100, lrnr_glmnet, lrnr_gam, lrnr_bayesglm ) We will fit a non-negative least squares metalearner using Lrnr_nnls. Note that any learner can be used as a metalearner. metalearner &lt;- make_learner(Lrnr_nnls) We can optionally select a subset of available covariates and pass only those variables to the modeling algorithm. Let’s consider screening covariates based on their correlation with our outcome of interest (cor.test p-value \\(\\leq 0.1\\)). screen_cor &lt;- Lrnr_pkg_SuperLearner_screener$new(&quot;screen.corP&quot;) # which covariates are selected on the full data? screen_cor$train(washb_task) [1] &quot;Lrnr_pkg_SuperLearner_screener_screen.corP&quot; $selected [1] &quot;tr&quot; &quot;fracode&quot; &quot;aged&quot; &quot;momage&quot; [5] &quot;momedu&quot; &quot;momheight&quot; &quot;hfiacat&quot; &quot;Nlt18&quot; [9] &quot;elec&quot; &quot;floor&quot; &quot;walls&quot; &quot;asset_wardrobe&quot; [13] &quot;asset_table&quot; &quot;asset_chair&quot; &quot;asset_khat&quot; &quot;asset_chouki&quot; [17] &quot;asset_tv&quot; &quot;asset_refrig&quot; &quot;asset_moto&quot; &quot;asset_sewmach&quot; [21] &quot;asset_mobile&quot; To “pipe” only the selected covariates to the modeling algorithm, we need to make a Pipeline, which is a just set of learners to be fit sequentially, where the fit from one learner is used to define the task for the next learner. cor_pipeline &lt;- make_learner(Pipeline, screen_cor, stack) Now our learners will be preceded by a screening step. We also consider the original stack, just to compare how the feature selection methods perform in comparison to the methods without feature selection. Analogous to what we have seen before, we have to stack the pipeline and original stack together, so we may use them as base learners in our super learner. fancy_stack &lt;- make_learner(Stack, cor_pipeline, stack) # we can visualize the stack dt_stack &lt;- delayed_learner_train(fancy_stack, washb_task) plot(dt_stack, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) We have made a library/stack of base learners and a metalearner, so we are ready to make the super learner. The super learner algorithm fits a metalearner on the validation-set predictions. sl &lt;- make_learner(Lrnr_sl, learners = fancy_stack, metalearner = metalearner ) # we can visualize the super learner dt_sl &lt;- delayed_learner_train(sl, washb_task) plot(dt_sl, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) 3. Train the super learner on the machine learning task Now we are ready to “train” our super learner on our sl3_task object, washb_task. sl_fit &lt;- sl$train(washb_task) 4. Obtain predicted values Now that we have fit the super learner, we are ready to obtain our predicted values, and we can also obtain a summary of the results. sl_preds &lt;- sl_fit$predict() head(sl_preds) [1] -0.5472491 -0.8848844 -0.7398054 -0.7282693 -0.6631600 -0.7484878 sl_fit$print() [1] &quot;SuperLearner:&quot; List of 2 $ : chr &quot;Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)&quot; $ : chr &quot;Stack&quot; [1] &quot;Lrnr_nnls&quot; lrnrs 1: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glm_TRUE 2: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_mean 3: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_ranger_100_TRUE_1 4: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 5: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.gam 6: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.bayesglm 7: Stack_Lrnr_glm_TRUE 8: Stack_Lrnr_mean 9: Stack_Lrnr_ranger_100_TRUE_1 10: Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 11: Stack_Lrnr_pkg_SuperLearner_SL.gam 12: Stack_Lrnr_pkg_SuperLearner_SL.bayesglm weights 1: 0.00000000 2: 0.01588778 3: 0.22225329 4: 0.00000000 5: 0.12280834 6: 0.00000000 7: 0.00000000 8: 0.00000000 9: 0.18020732 10: 0.14275597 11: 0.31799077 12: 0.00000000 [1] &quot;Cross-validated risk (MSE, squared error loss):&quot; learner 1: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glm_TRUE 2: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_mean 3: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_ranger_100_TRUE_1 4: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 5: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.gam 6: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.bayesglm 7: Stack_Lrnr_glm_TRUE 8: Stack_Lrnr_mean 9: Stack_Lrnr_ranger_100_TRUE_1 10: Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 11: Stack_Lrnr_pkg_SuperLearner_SL.gam 12: Stack_Lrnr_pkg_SuperLearner_SL.bayesglm 13: SuperLearner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk 1: NA 1.015128 0.02363317 0.07629401 0.8927540 1.131594 2: NA 1.065282 0.02502664 0.09191791 0.9264292 1.196647 3: NA 1.020483 0.02365841 0.08301199 0.8720207 1.145592 4: NA 1.012625 0.02360133 0.07907979 0.8822292 1.130862 5: NA 1.011497 0.02357149 0.07449866 0.8919503 1.132290 6: NA 1.015119 0.02363328 0.07631510 0.8926608 1.131570 7: NA 1.018612 0.02380402 0.07799191 0.8956048 1.134940 8: NA 1.065282 0.02502664 0.09191791 0.9264292 1.196647 9: NA 1.019274 0.02360942 0.08396392 0.8855651 1.140970 10: NA 1.012418 0.02360683 0.07920912 0.8826677 1.130236 11: NA 1.012122 0.02358982 0.07486427 0.8981537 1.135950 12: NA 1.018596 0.02380414 0.07801948 0.8954820 1.134909 13: NA 1.005199 0.02343046 0.07904616 0.8761158 1.128595 3.4 Extensions 3.4.1 Cross-validated Super Learner We can cross-validate the super learner to see how well the super learner performs on unseen data, and obtain an estimate of the cross-validated risk of the super learner. This estimation procedure requires an “external” layer of cross-validation, also called nested cross-validation, which involves setting aside a separate holdout sample that we don’t use to fit the super learner. This external cross validation procedure may also incorporate 10 folds, which is the default in sl3. However, we will incorporate 2 outer/external folds of cross-validation for computational efficiency. We also need to specify a loss function to evaluate super learner. Documentation for the available loss functions can be found in the sl3 Loss Function Reference. washb_task_new &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome, folds = make_folds(washb_data, fold_fun = folds_vfold, V = 2) ) Warning in .subset2(public_bind_env, &quot;initialize&quot;)(...): Missing Covariate Data Found. Imputing covariates using sl3_process_missing CVsl &lt;- CV_lrnr_sl(sl_fit, washb_task_new, loss_squared_error) CVsl %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;250px&quot;) learner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glm_TRUE NA 1.0361 0.0244 0.1003 0.9652 1.1070 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_mean NA 1.0656 0.0251 0.1019 0.9936 1.1377 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_ranger_100_TRUE_1 NA 1.0277 0.0240 0.0991 0.9576 1.0978 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE NA 1.0212 0.0240 0.1040 0.9477 1.0947 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.gam NA 1.0338 0.0243 0.0964 0.9657 1.1019 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_pkg_SuperLearner_SL.bayesglm NA 1.0361 0.0244 0.1003 0.9651 1.1070 Stack_Lrnr_glm_TRUE NA 1.0461 0.0256 0.1116 0.9672 1.1251 Stack_Lrnr_mean NA 1.0656 0.0251 0.1019 0.9936 1.1377 Stack_Lrnr_ranger_100_TRUE_1 NA 1.0168 0.0238 0.1045 0.9429 1.0907 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE NA 1.0213 0.0240 0.1066 0.9459 1.0967 Stack_Lrnr_pkg_SuperLearner_SL.gam NA 1.0442 0.0263 0.1155 0.9625 1.1258 Stack_Lrnr_pkg_SuperLearner_SL.bayesglm NA 1.0461 0.0256 0.1117 0.9671 1.1251 SuperLearner NA 1.0176 0.0239 0.1052 0.9432 1.0919 3.4.2 Variable Importance Measures with sl3 The sl3 varimp function returns a table with variables listed in decreasing order of importance, in which the measure of importance is based on a risk difference between the learner fit with a permuted covariate and the learner fit with the true covariate, across all covariates. In this manner, the larger the risk difference, the more important the variable is in the prediction. washb_varimp &lt;- varimp(sl_fit, loss_squared_error) washb_varimp %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;250px&quot;) X risk_diff aged 0.0353 momedu 0.0090 tr 0.0070 month 0.0060 Nlt18 0.0051 asset_chair 0.0047 momheight 0.0045 asset_refrig 0.0035 floor 0.0022 hfiacat 0.0018 fracode 0.0016 asset_wardrobe 0.0015 asset_table 0.0014 elec 0.0013 asset_chouki 0.0012 walls 0.0010 momage 0.0005 asset_khat 0.0004 watmin 0.0002 asset_tv 0.0001 asset_moto 0.0000 asset_bike 0.0000 sex 0.0000 delta_momage -0.0001 asset_sewmach -0.0001 delta_momheight -0.0002 roof -0.0003 asset_mobile -0.0011 Ncomp -0.0013 3.5 Exercise 3.5.1 Predicting Myocardial Infarction with sl3 Follow the steps below to predict myocardial infarction (mi) using the available covariate data. Thanks to Professor David Benkeser at Emory University for making the this Cardiovascular Health Study (CHS) data accessible. Work with a buddy/team. You have 20 minutes. In the etherpad, submit your group’s answers to the following questions. Which learner was the discrete super learner? What was the cross validated mean risk of the discrete super learner? What was the cross validated risk of the continuous super learner? Did your group face any challenges? Any additional comments/questions about this sl3 section of the workshop? # load the data set db_data &lt;- url(&quot;https://raw.githubusercontent.com/benkeser/sllecture/master/chspred.csv&quot;) chspred &lt;- read_csv(file = db_data, col_names = TRUE) # take a quick peek head(chspred) %&gt;% kable(digits = 4) %&gt;% kable_styling(fixed_thead = T, font_size = 10) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;200px&quot;) waist alcoh hdl beta smoke ace ldl bmi aspirin gend age estrgn glu ins cysgfr dm fetuina whr hsed race logcystat logtrig logcrp logcre health logkcal sysbp mi 110.1642 0.0000 66.4974 0 0 1 114.2162 27.9975 0 0 73.5179 0 159.9314 70.3343 75.0078 1 0.1752 1.1690 1 1 -0.3420 5.4063 2.0126 -0.6739 0 4.3926 177.1345 0 89.9763 0.0000 50.0652 0 0 0 103.7766 20.8931 0 0 61.7723 0 153.3888 33.9695 82.7433 1 0.5717 0.9011 0 0 -0.0847 4.8592 3.2933 -0.5551 1 6.2071 136.3742 0 106.1941 8.4174 40.5059 0 0 0 165.7158 28.4554 1 1 72.9312 0 121.7145 -17.3017 74.6989 0 0.3517 1.1797 0 1 -0.4451 4.5088 0.3013 -0.0115 0 6.7320 135.1993 0 90.0566 0.0000 36.1750 0 0 0 45.2035 23.9608 0 0 79.1191 0 53.9691 11.7315 95.7823 0 0.5439 1.1360 0 0 -0.4807 5.1832 3.0243 -0.5751 1 7.3972 139.0182 0 78.6143 2.9790 71.0642 0 1 0 131.3121 10.9656 0 1 69.0179 0 94.3153 9.7112 72.7109 0 0.4916 1.1028 1 0 0.3121 4.2190 -0.7057 0.0053 1 8.2779 88.0470 0 91.6593 0.0000 59.4963 0 0 0 171.1872 29.1317 0 1 81.8346 0 212.9066 -28.2269 69.2184 1 0.4621 0.9529 1 0 -0.2872 5.1773 0.9705 0.2127 1 5.9942 69.5943 0 Create an sl3 task, setting myocardial infarction mi as the outcome and using all available covariate data. Make a library of seven relatively fast base learning algorithms (i.e., do not consider BART or HAL). Customize hyperparameters for one of your learners. Feel free to use learners from sl3 or SuperLearner. You may use the same base learning library that is presented above. Incorporate feature selection with the SuperLearner screener screen.corP. Fit the metalearning step with non-negative least squares, Lrnr_nnls. With the metalearner and base learners, make the super learner and train it on the task. Print your super learner fit by calling print() with $. Cross-validate your super learner fit to see how well it performs on unseen data. Specify loss_squared_error as the loss function to evaluate the super learner. Like above, create a new task with 2 folds of external cross validation for computational efficiency. 3.6 Summary The general ensemble learning approach of super learner can be applied to a diversity of estimation and prediction problems that can be defined by a loss function. Plug-in estimators of the estimand are desirable because a plug-in estimator respects both the local and global constraints of the statistical model. Asymptotically linear estimators are also advantageous, since they converge to the estimand at \\(1/\\sqrt{n}\\) rate, and thereby permit formal statistical inference. If we plug in the estimator returned by super learner into the target parameter mapping, then we would end up with an estimator that has the same bias as what we plugged in. This estimator would not be asymptotically linear. Targeted maximum likelihood estimation (TMLE) is a general strategy that succeeds in constructing asymptotically linear plug-in estimators. In the chapters that follow, we focus on the targeted maximum likelihood estimator and the targeted minimum loss-based estimator, both referred to as TMLE. References "],
["the-tmle-framework.html", "Chapter 4 The TMLE Framework 4.1 Learning Objectives 4.2 Easy-Bake Example: tmle3 for ATE 4.3 tmle3 Components 4.4 Fitting tmle3 with multiple parameters 4.5 Exercise 4.6 Summary", " Chapter 4 The TMLE Framework Jeremy Coyle Based on the tmle3 R package. Updated: 2019-05-22 4.1 Learning Objectives Use tmle3 to estimate an Average Treatment Effect (ATE) Understand tmle3 “Specs” Fit tmle3 for a custom set of parameters Use the delta method to estimate transformations of parameters 4.2 Easy-Bake Example: tmle3 for ATE We’ll illustrate the most basic use of TMLE using the WASH Benefits data introduced earlier and estimating an Average Treatment Effect (ATE). As a reminder, the ATE is identified with the following statistical parameter (under assumptions): \\(ATE = \\mathbb{E}_0(Y(1)-Y(0)) = \\mathbb{E}_0\\left(\\mathbb{E}_0[Y \\mid A=1,W]-\\mathbb{E}_0[Y \\mid A=0,W] \\right)\\) This Easy-Bake implementation consists of the following steps: Load the necessary libraries and data Define the variable roles Create a “Spec” object Define the super learners Fit the TMLE Evaluate the TMLE estimates 0. Load the Data We’ll use the same WASH Benefits data as the earlier chapters: library(data.table) library(tmle3) library(sl3) washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) 1. Define the variable roles We’ll use the common \\(W\\) (covariates), \\(A\\) (treatment/intervention), \\(Y\\) (outcome) data structure. tmle3 needs to know what variables in the dataset correspond to each of these roles. We use a list of character vectors to tell it. We call this a “Node List” as it corresponds to the nodes in a Directed Acyclic Graph (DAG), a way of displaying causal relationships between variables. node_list &lt;- list( W = c( &quot;month&quot;, &quot;aged&quot;, &quot;sex&quot;, &quot;momage&quot;, &quot;momedu&quot;, &quot;momheight&quot;, &quot;hfiacat&quot;, &quot;Nlt18&quot;, &quot;Ncomp&quot;, &quot;watmin&quot;, &quot;elec&quot;, &quot;floor&quot;, &quot;walls&quot;, &quot;roof&quot;, &quot;asset_wardrobe&quot;, &quot;asset_table&quot;, &quot;asset_chair&quot;, &quot;asset_khat&quot;, &quot;asset_chouki&quot;, &quot;asset_tv&quot;, &quot;asset_refrig&quot;, &quot;asset_bike&quot;, &quot;asset_moto&quot;, &quot;asset_sewmach&quot;, &quot;asset_mobile&quot; ), A = &quot;tr&quot;, Y = &quot;whz&quot; ) Handling Missingness Currently, missingness in tmle3 is handled in a fairly simple way: Missing covariates are median (for continuous) or mode (for discrete) imputed, and additional covariates indicating imputation are generated Observations missing either treatment or outcome variables are excluded. We plan to implement IPCW-TMLE to more efficiently handle missingness in the treatment and outcome variables. These steps are implemented in the process_missing function in tmle3: processed &lt;- process_missing(washb_data, node_list) washb_data &lt;- processed$data node_list &lt;- processed$node_list 2. Create a “Spec” Object tmle3 is general, and allows most components of the TMLE procedure to be specified in a modular way. However, most end-users will not be interested in manually specifying all of these components. Therefore, tmle3 implements a tmle3_Spec object that bundles a set of components into a specification that, with minimal additional detail, can be run by an end-user. We’ll start with using one of the specs, and then work our way down into the internals of tmle3. ate_spec &lt;- tmle_ATE( treatment_level = &quot;Nutrition + WSH&quot;, control_level = &quot;Control&quot; ) 3. Define the Relevant Super Learners Currently, the only other thing a user must define are the sl3 learners used to estimate the relevant factors of the likelihood: Q and g. This takes the form of a list of sl3 learners, one for each likelihood factor to be estimated with sl3: # choose base learners lrnr_mean &lt;- make_learner(Lrnr_mean) lrnr_xgboost &lt;- make_learner(Lrnr_xgboost) # define metalearners appropriate to data types ls_metalearner &lt;- make_learner(Lrnr_nnls) mn_metalearner &lt;- make_learner( Lrnr_solnp, metalearner_linear_multinomial, loss_loglik_multinomial ) sl_Y &lt;- Lrnr_sl$new( learners = list(lrnr_mean, lrnr_xgboost), metalearner = ls_metalearner ) sl_A &lt;- Lrnr_sl$new( learners = list(lrnr_mean, lrnr_xgboost), metalearner = mn_metalearner ) learner_list &lt;- list(A = sl_A, Y = sl_Y) Here, we use a Super Learner as defined in the previous sl3 section. In the future, we plan to include reasonable default learners. 4. Fit the TMLE We now have everything we need to fit the tmle using tmle3: tmle_fit &lt;- tmle3(ate_spec, washb_data, node_list, learner_list) 5. Evaluate the Estimates We can see the summary results by printing the fit object. Alternatively, we can extra results from the summary by indexing into it: print(tmle_fit) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 0.002418799 -0.002071827 se lower upper psi_transformed lower_transformed 1: 0.05077897 -0.1015968 0.09745313 -0.002071827 -0.1015968 upper_transformed 1: 0.09745313 estimates &lt;- tmle_fit$summary$psi_transformed print(estimates) [1] -0.002071827 4.3 tmle3 Components Now that we’ve successfully used a spec to obtain a TML estimate, let’s look under the hood at the components. The spec has a number of functions that generate the objects necessary to define and fit a TMLE. 4.3.1 tmle3_task First is, a tmle3_Task, analogous to an sl3_Task, containing the data we’re fitting the TMLE to, as well as an NPSEM generated from the node_list defined above, describing the variables and their relationships. tmle_task &lt;- ate_spec$make_tmle_task(washb_data, node_list) tmle_task$npsem $W tmle3_Node: W Variables: month, aged, sex, momedu, hfiacat, Nlt18, Ncomp, watmin, elec, floor, walls, roof, asset_wardrobe, asset_table, asset_chair, asset_khat, asset_chouki, asset_tv, asset_refrig, asset_bike, asset_moto, asset_sewmach, asset_mobile, momage, momheight, delta_momage, delta_momheight Parents: $A tmle3_Node: A Variables: tr Parents: W $Y tmle3_Node: Y Variables: whz Parents: A, W 4.3.2 Initial Likelihood Next, is an object representing the likelihood, factorized according to the NPSEM described above: initial_likelihood &lt;- ate_spec$make_initial_likelihood( tmle_task, learner_list ) print(initial_likelihood) W: Lf_emp A: LF_fit Y: LF_fit These components of the likelihood indicate how the factors were estimated: the marginal distribution of \\(W\\) was estimated using NP-MLE, and the conditional distributions of \\(A\\) and \\(Y\\) were estimated using sl3 fits (as defined with the learner_list) above. We can use this in tandem with the tmle_task object to obtain likelihood estimates for each observation: initial_likelihood$get_likelihoods(tmle_task) W A Y 1: 0.0002129925 0.2478909 -0.6607611 2: 0.0002129925 0.2545843 -0.6339732 3: 0.0002129925 0.2589513 -0.6218671 4: 0.0002129925 0.2795272 -0.6017837 5: 0.0002129925 0.2535642 -0.5457164 --- 4691: 0.0002129925 0.1347314 -0.4665240 4692: 0.0002129925 0.1262065 -0.4851757 4693: 0.0002129925 0.1264447 -0.5689520 4694: 0.0002129925 0.1741034 -0.8155575 4695: 0.0002129925 0.1298657 -0.5428317 4.3.3 Targeted Likelihood (updater) We also need to define a “Targeted Likelihood” object. This is a special type of likelihood that is able to be updated using an tmle3_Update object. This object defines the update strategy (e.g. submodel, loss function, CV-TMLE or not, etc). targeted_likelihood &lt;- Targeted_Likelihood$new(initial_likelihood) When constructing the targeted likelihood, you can specify different update options. See the documentation for tmle3_Update for details of the different options. For example, you can disable CV-TMLE (the default in tmle3) as follows: targeted_likelihood_no_cv &lt;- Targeted_Likelihood$new(initial_likelihood, updater = list(cvtmle = FALSE) ) 4.3.4 Parameter Mapping Finally, we need to define the parameters of interest. Here, the spec defines a single parameter, the ATE. In the next section, we’ll see how to add additional parameters. tmle_params &lt;- ate_spec$make_params(tmle_task, targeted_likelihood) print(tmle_params) [[1]] Param_ATE: ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 4.3.5 Putting it all together Having used the spec to manually generate all these components, we can now manually fit a tmle3: tmle_fit_manual &lt;- fit_tmle3( tmle_task, targeted_likelihood, tmle_params, targeted_likelihood$updater ) print(tmle_fit_manual) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 0.002396446 -0.001774024 se lower upper psi_transformed lower_transformed 1: 0.05097856 -0.1016902 0.09814212 -0.001774024 -0.1016902 upper_transformed 1: 0.09814212 The result is equivalent to fitting using the tmle3 function as above. 4.4 Fitting tmle3 with multiple parameters Above, we fit a tmle3 with just one parameter. tmle3 also supports fitting multiple parameters simultaneously. To illustrate this, we’ll use the tmle_TSM_all spec: tsm_spec &lt;- tmle_TSM_all() targeted_likelihood &lt;- Targeted_Likelihood$new(initial_likelihood) all_tsm_params &lt;- tsm_spec$make_params(tmle_task, targeted_likelihood) print(all_tsm_params) [[1]] Param_TSM: E[Y_{A=Control}] [[2]] Param_TSM: E[Y_{A=Handwashing}] [[3]] Param_TSM: E[Y_{A=Nutrition}] [[4]] Param_TSM: E[Y_{A=Nutrition + WSH}] [[5]] Param_TSM: E[Y_{A=Sanitation}] [[6]] Param_TSM: E[Y_{A=WSH}] [[7]] Param_TSM: E[Y_{A=Water}] This spec generates a Treatment Specific Mean (TSM) for each level of the exposure variable. Note that we must first generate a new targeted likelihood, as the old one was targeted to the ATE. However, we can recycle the initial likelihood we fit above, saving us a super learner step. 4.4.1 Delta Method We can also define parameters based on Delta Method Transformations of other parameters. For instance, we can estimate a ATE using the delta method and two of the above TSM parameters: ate_param &lt;- define_param( Param_delta, targeted_likelihood, delta_param_ATE, list(all_tsm_params[[1]], all_tsm_params[[4]]) ) print(ate_param) Param_delta: E[Y_{A=Nutrition + WSH}] - E[Y_{A=Control}] This can similarly be used to estimate other derived parameters like Relative Risks, and Population Attributable Risks 4.4.2 Fit We can now fit a TMLE simultaneously for all TSM parameters, as well as the above defined ATE parameter all_params &lt;- c(all_tsm_params, ate_param) tmle_fit_multiparam &lt;- fit_tmle3( tmle_task, targeted_likelihood, all_params, targeted_likelihood$updater ) print(tmle_fit_multiparam) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: TSM E[Y_{A=Control}] -0.595854903 -0.620485238 2: TSM E[Y_{A=Handwashing}] -0.608178413 -0.642378059 3: TSM E[Y_{A=Nutrition}] -0.603777016 -0.625090160 4: TSM E[Y_{A=Nutrition + WSH}] -0.593458456 -0.621925345 5: TSM E[Y_{A=Sanitation}] -0.589357157 -0.592053786 6: TSM E[Y_{A=WSH}] -0.531589899 -0.449466822 7: TSM E[Y_{A=Water}] -0.577888679 -0.522162157 8: ATE E[Y_{A=Nutrition + WSH}] - E[Y_{A=Control}] 0.002396446 -0.001440106 se lower upper psi_transformed lower_transformed 1: 0.02980465 -0.6789013 -0.56206919 -0.620485238 -0.6789013 2: 0.04208255 -0.7248583 -0.55989777 -0.642378059 -0.7248583 3: 0.04232352 -0.7080427 -0.54213758 -0.625090160 -0.7080427 4: 0.04148839 -0.7032411 -0.54060959 -0.621925345 -0.7032411 5: 0.04225567 -0.6748734 -0.50923419 -0.592053786 -0.6748734 6: 0.04513028 -0.5379206 -0.36101309 -0.449466822 -0.5379206 7: 0.03893891 -0.5984810 -0.44584329 -0.522162157 -0.5984810 8: 0.05096651 -0.1013326 0.09845242 -0.001440106 -0.1013326 upper_transformed 1: -0.56206919 2: -0.55989777 3: -0.54213758 4: -0.54060959 5: -0.50923419 6: -0.36101309 7: -0.44584329 8: 0.09845242 4.5 Exercise Follow the steps below to estimate an average treatment effect using data from the Collaborative Perinatal Project (CPP), available in the sl3 package. To simplify this example, we define a binary intervention variable, parity01 – an indicator of having one or more children before the current child and a binary outcome, haz01 – an indicator of having an above average height for age. Work with a buddy/team. You have 20 minutes. In the etherpad, submit your group’s answers to the following: Interpret the tmle3 fit both causally and statistically. Did your group face any challenges? Any additional comments/questions about this tmle3 section of the workshop? # load the data set data(cpp) cpp &lt;- cpp[!is.na(cpp[, &quot;haz&quot;]), ] cpp$parity01 &lt;- as.numeric(cpp$parity &gt; 0) cpp[is.na(cpp)] &lt;- 0 cpp$haz01 &lt;- as.numeric(cpp$haz &gt; 0) Define the variable roles \\((W,A,Y)\\) by creating a list of these nodes. Include the following baseline covariates in \\(W\\): apgar1, apgar5, gagebrth, mage, meducyrs, sexn. Both \\(A\\) and \\(Y\\) are specified above. Define a tmle3_Spec object for the ATE, tmle_ATE(). Using the same base learning libraries defined above, specify sl3 base learners for estimation of \\(Q = E(Y|A,Y)\\) and \\(g=P(A|W)\\). Define the metalearner like below metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_binomial, learner_function = metalearner_logistic_binomial) Define one super learner for estimating \\(Q\\) and another for estimating \\(g\\). Use the metalearner above for both \\(Q\\) and \\(g\\) super learners. Create a list of the two super learners defined in Step 5 and call this object learner_list. The list names should be A (defining the super learner for estimating \\(g\\)) and Y (defining the super learner for estimating \\(Q\\)). Fit the tmle with the tmle3 function by specifying (1) the tmle3_Spec, which we defined in Step 2; (2) the data; (3) the list of nodes, which we specified in Step 1; and (4) the list of super learners for estimating \\(g\\) and \\(Q\\), which we defined in Step 6. Note: Like before, you will need to make a data copy to deal with data.table weirdness (cpp2 &lt;- data.table::copy(cpp)) and use cpp2 as the data. 4.6 Summary tmle3 is a general purpose framework for generating TML estimates. The easiest way to use it is to use a predefined spec, allowing you to just fill in the blanks for the data, variable roles, and sl3 learners. However, digging under the hood allows users to specify a wide range of TMLEs. In the next sections, we’ll see how this framework can be used to estimate advanced parameters such as optimal treatments and shift interventions. "],
["optimal-individualized-treatment-regimes.html", "Chapter 5 Optimal Individualized Treatment Regimes 5.1 Learning Objectives 5.2 Introduction to Optimal Individualized Interventions 5.3 Data Structure and Notation 5.4 Defining the Causal Effect of an Optimal Individualized Intervention 5.5 Binary Treatment 5.6 Categorical Treatment 5.7 Extensions to Causal Effect of an OIT 5.8 Exercise 5.9 Summary", " Chapter 5 Optimal Individualized Treatment Regimes Ivana Malenica Based on the tmle3mopttx R package by Ivana Malenica, Jeremy Coyle, and Mark van der Laan. Updated: 2019-05-22 5.1 Learning Objectives By the end of this lesson you will be able to: Differentiate between dynamic and optimal dynamic treatment regimes from static interventions. Understand the benefits, and challenges, associated with using optimal individualized treatment regimes in practice. Contrast the impact of implementing an optimal individualized treatment in the population with static and dynamic regimes. Estimate causal effects under optimal individualized treatment regimes with the tmle3mopttx R package. Contrast the population impact of implementing optimal individualized treatment based on sub-optimal rules. Construct realistic optimal individualized treatments that respect real data and subject-matter knowledge limitations on interventions. Understand and implement variable importance analysis defined in terms of optimal individualized treatment interventions. 5.2 Introduction to Optimal Individualized Interventions Identifying which intervention will be effective for which patient based on lifestyle, genetic and environmental factors is a common goal in precision medicine. One opts to administer the intervention to individuals who will profit from it, instead of assigning treatment on a population level. This aim motivates a different type of intervention, as opposed to the static exposures we might be used to. In this chapter, we learn about dynamic (individualized) interventions that tailor the treatment decision based on the collected covariates. In the statistics community, such a treatment strategy is termed individualized treatment regimes (ITR), and the (counterfactual) population mean outcome under an ITR is the value of the ITR. Even more, suppose one wishes to maximize the population mean of an outcome, where for each individual we have access to some set of measured covariates. An ITR with the maximal value is referred to as an optimal ITR or the optimal individualized treatment. Consequently, the value of an optimal ITR is termed the optimal value, or the mean under the optimal individualized treatment. One opts to administer the intervention to individuals who will profit from it, instead of assigning treatment on a population level. But how do we know which intervention works for which patient? For example, one might seek to improve retention in HIV care. In a randomized clinical trial, several interventions show efficacy- including appointment reminders through text messages, small cash incentives for on time clinic visits, and peer health workers. Ideally, we want to improve effectiveness by assigning each patient the intervention they are most likely to benefit from, as well as improve efficiency by not allocating resources to individuals that do not need them, or would Figure 5.1: Illustration of a Dynamic Treatment Regime in a Clinical Setting This aim motivates a different type of intervention, as opposed to the static exposures we might be used to. In this chapter, we examine multiple examples of optimal individualized treatment regimes and estimate the mean outcome under the ITR where the candidate rules are restricted to depend only on user-supplied subset of the baseline covariates. In order to accomplish this, we present the tmle3mopttx R package, which features an implementation of a recently developed algorithm for computing targeted minimum loss-based estimates of a causal effect based on optimal ITR for categorical treatment. In particular, we will use tmle3mopttx to estimate optimal ITR and the corresponding population value, construct realistic optimal ITRs, and perform variable importance in terms of the mean under the optimal individualized treatment. 5.3 Data Structure and Notation Suppose we observe \\(n\\) independent and identically distributed observations of the form \\(O=(W,A,Y) \\sim P_0\\). \\(P_0 \\in \\mathcal{M}\\), where \\(\\mathcal{M}\\) is the fully nonparametric model. Denote \\(A \\in \\mathcal{A}\\) as categorical treatment, where \\(\\mathcal{A} \\equiv \\{a_1, \\cdots, a_{n_A} \\}\\) and \\(n_A = |\\mathcal{A}|\\), with \\(n_A\\) denoting the number of categories. Denote \\(Y\\) as the final outcome, and \\(W\\) a vector-valued collection of baseline covariates. The likelihood of the data admits a factorization, implied by the time ordering of \\(O\\). \\[\\begin{equation*}\\label{eqn:likelihood_factorization} p_0(O) = p_{Y,0}(Y|A,W) p_{A,0}(A|W) p_{W,0}(W) = q_{Y,0}(Y|A,W) q_{A,0}(A|W) q_{W,0}(W), \\end{equation*}\\] Consequently, we define \\(P_{Y,0}(Y|A,W)=Q_{Y,0}(Y|A,W)\\), \\(P_{A,0}(A|W)=g_0(A|W)\\) and \\(P_{W,0}(W)=Q_{W,0}(W)\\) as the corresponding conditional distributions of \\(Y\\), \\(A\\) and \\(W\\). We also define \\(\\bar{Q}_{Y,0}(A,W) \\equiv E_0[Y|A,W]\\). Finally, denote \\(V\\) as \\(V \\in W\\), defining a subset of the baseline covariates the optimal individualized rule depends on. 5.4 Defining the Causal Effect of an Optimal Individualized Intervention Consider dynamic treatment rules \\(V \\rightarrow d(V) \\in \\{a_1, \\cdots, a_{n_A} \\} \\times \\{1\\}\\), for assigning treatment \\(A\\) based on \\(V \\in W\\). Dynamic treatment regime may be viewed as an intervention in which \\(A\\) is set equal to a value based on a hypothetical regime \\(d(V)\\), and \\(Y_{d(V)}\\) is the corresponding counterfactual outcome under \\(d(V)\\). The goal of any causal analysis motivated by an optimal individualized intervention is to estimate a parameter defined as the counterfactual mean of the outcome with respect to the modified intervention distribution. Recall causal assumptions: Consistency: \\(Y^{d(v_i)}_i = Y_i\\) in the event \\(A_i = d(v_i)\\), for \\(i = 1, \\ldots, n\\). Stable unit value treatment assumption (SUTVA): \\(Y^{d(v_i)}_i\\) does not depend on \\(d(v_j)\\) for \\(i = 1, \\ldots, n\\) and \\(j \\neq i\\), or lack of interference. Strong ignorability: \\(A \\perp \\!\\!\\! \\perp Y^{d(v)} \\mid W\\), for all \\(a \\in \\mathcal{A}\\). Positivity (or overlap): \\(P_0(\\min_{a \\in \\mathcal{A}} g_0(a|W) &gt; 0)=1\\) Here, we also assume non-exceptional law is in effect. We are primarily interested in the value of an individualized rule, \\[E_0[Y_{d(V)}] = E_{0,W}[\\bar{Q}_{Y,0}(A=d(V),W)].\\] The optimal rule is the rule with the maximal value: \\[d_{opt}(V) \\equiv \\text{argmax}_{d(V) \\in \\mathcal{D}} E_0[Y_{d(V)}] \\] where \\(\\mathcal{D}\\) represents the set of possible rules, \\(d\\), implied by \\(V\\). The target causal estimand of our analysis is: \\[\\psi_0 := E_0[Y_{d_{opt}(V)}] = E_{0,W}[\\bar{Q}_{Y,0}(A=d_{opt}(V),W)].\\] General, high-level idea: Learn the optimal ITR using the Super Learner. Estimate its value with the cross-validated Targeted Minimum Loss-based Estimator (CV-TMLE). 5.4.1 Why CV-TMLE? CV-TMLE is necessary as the non-cross-validated TMLE is biased upward for the mean outcome under the rule, and therefore overly optimistic. More generally however, using CV-TMLE allows us more freedom in estimation and therefore greater data adaptivity, without sacrificing inference! 5.5 Binary Treatment How do we estimate the optimal individualized treatment regime? In the case of a binary treatment, a key quantity for optimal ITR is the blip function. Optimal ITR ideally assigns treatment to individuals falling in strata in which the stratum specific average treatment effect, the blip function, is positive and does not assign treatment to individuals for which this quantity is negative. We define the blip function as: \\[\\bar{Q}_0(V) \\equiv E_0[Y_1-Y_0|V] \\equiv E_0[\\bar{Q}_{Y,0}(1,W) - \\bar{Q}_{Y,0}(0,W) | V], \\] or the average treatment effect within a stratum of \\(V\\). Optimal individualized rule can now be derived as \\(d_{opt}(V) = I(\\bar{Q}_{0}(V) &gt; 0)\\). Relying on the Targeted Maximum Likelihood (TML) estimator and the Super Learner estimate of the blip function, we follow the below steps in order to obtain value of the ITR: Estimate \\(\\bar{Q}_{Y,0}(A,W)\\) and \\(g_0(A|W)\\) using sl3. We denote such estimates as \\(\\bar{Q}_{Y,n}(A,W)\\) and \\(g_n(A|W)\\). Apply the doubly robust Augmented-Inverse Probability Weighted (A-IPW) transform to our outcome, where we define: \\[D_{\\bar{Q}_Y,g,a}(O) \\equiv \\frac{I(A=a)}{g(A|W)} (Y-\\bar{Q}_Y(A,W)) + \\bar{Q}_Y(A=a,W)\\] Note that under the randomization and positivity assumptions we have that \\(E[D_{\\bar{Q}_Y,g,a}(O) | V] = E[Y_a |V].\\) We emphasize the double robust nature of the A-IPW transform: consistency of \\(E[Y_a |V]\\) will depend on correct estimation of either \\(\\bar{Q}_{Y,0}(A,W)\\) or \\(g_0(A|W)\\). As such, in a randomized trial, we are guaranteed a consistent estimate of \\(E[Y_a |V]\\) even if we get \\(\\bar{Q}_{Y,0}(A,W)\\) wrong! Using this transform, we can define the following contrast: \\[D_{\\bar{Q}_Y,g}(O) = D_{\\bar{Q}_Y,g,a=1}(O) - D_{\\bar{Q}_Y,g,a=0}(O)\\] We estimate the blip function, \\(\\bar{Q}_{0,a}(V)\\), by regressing \\(D_{\\bar{Q}_Y,g}(O)\\) on \\(V\\) using the specified sl3 library of learners and an appropriate loss function. Our estimated rule is \\(d(V) = \\text{argmax}_{a \\in \\mathcal{A}} \\bar{Q}_{0,a}(V)\\). We obtain inference for the mean outcome under the estimated optimal rule using CV-TMLE. 5.5.1 Evaluating the Causal Effect of an optimal ITR with Binary Treatment To start, let us load the packages we will use and set a seed for simulation: library(here) library(data.table) library(sl3) library(tmle3) library(tmle3mopttx) library(devtools) set.seed(111) 5.5.1.1 Simulate Data Our data generating distribution is of the following form: \\[W \\sim \\mathcal{N}(\\bf{0},I_{3 \\times 3})\\] \\[P(A=1|W) = \\frac{1}{1+\\exp^{(-0.8*W_1)}}\\] \\[P(Y=1|A,W) = 0.5\\text{logit}^{-1}[-5I(A=1)(W_1-0.5)+5I(A=0)(W_1-0.5)] + 0.5\\text{logit}^{-1}(W_2W_3)\\] data(&quot;data_bin&quot;) The above composes our observed data structure \\(O = (W, A, Y)\\). Note that the mean under the true optimal rule is \\(\\psi=0.578\\) for this data generating distribution. Next, we specify the role that each variable in the data set plays as the nodes in a DAG. # organize data and nodes for tmle3 data &lt;- data_bin node_list &lt;- list( W = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;), A = &quot;A&quot;, Y = &quot;Y&quot; ) We now have an observed data structure (data), and a specification of the role that each variable in the data set plays as the nodes in a DAG. 5.5.1.2 Constructing Optimal Stacked Regressions with sl3 We generate three different ensemble learners that must be fit, corresponding to the learners for the outcome regression, propensity score, and the blip function. # Define sl3 library and metalearners: lrn_xgboost_50 &lt;- Lrnr_xgboost$new(nrounds = 50) lrn_xgboost_100 &lt;- Lrnr_xgboost$new(nrounds = 100) lrn_xgboost_500 &lt;- Lrnr_xgboost$new(nrounds = 500) lrn_mean &lt;- Lrnr_mean$new() lrn_glm &lt;- Lrnr_glm_fast$new() ## Define the Q learner: Q_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500,lrn_mean, lrn_glm), metalearner = Lrnr_nnls$new() ) ## Define the g learner: g_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_100, lrn_glm), metalearner = Lrnr_nnls$new() ) ## Define the B learner: b_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500,lrn_mean, lrn_glm), metalearner = Lrnr_nnls$new() ) We make the above explicit with respect to standard notation by bundling the ensemble learners into a list object below: # specify outcome and treatment regressions and create learner list learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) 5.5.1.3 Targeted Estimation of the Mean under the Optimal Individualized Interventions Effects To start, we will initialize a specification for the TMLE of our parameter of interest simply by calling tmle3_mopttx_blip_revere. We specify the argument V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;) when initializing the tmle3_Spec object in order to communicate that we’re interested in learning a rule dependent on V covariates. We also need to specify the type of blip we will use in this estimation problem, and the list of learners used to estimate relevant parts of the likelihood and the blip function. In addition, we need to specify whether we want to maximize or minimize the mean outcome under the rule (maximize=TRUE). If complex=FALSE, tmle3mopttx will consider all the possible rules under a smaller set of covariates including the static rules, and optimize the mean outcome over all the suboptimal rules dependent on \\(V\\). If realistic=TRUE, only treatments supported by the data will be considered, therefore alleviating concerns regarding practical positivity issues. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;), type = &quot;blip1&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.4289592 0.5701264 0.02749039 0.5162462 0.6240065 psi_transformed lower_transformed upper_transformed 1: 0.5701264 0.5162462 0.6240065 We can see that the confidence interval covers our true mean under the true optimal individualized treatment! 5.6 Categorical Treatment QUESTION: What if the treatment is categorical? Can we still use the blip function? In this section, we consider how to evaluate the mean outcome under the optimal individualized treatment when \\(A\\) has more than two categories! We define pseudo-blips as vector valued entities where the output for a given \\(V\\) is a vector of length equal to the number of treatment categories, \\(n_A\\). As such, we define it as: \\[\\bar{Q}_0^{pblip}(V) = \\{\\bar{Q}_{0,a}^{pblip}(V): a \\in \\mathcal{A} \\}\\] We implement three different pseudo-blips in tmle3mopttx. Blip1 corresponds to choosing a reference category of treatment, and defining the blip for all other categories relative to the specified reference: \\[\\bar{Q}_{0,a}^{pblip-ref}(V) \\equiv E_0(Y_a-Y_0|V)\\] Blip2 approach corresponds to defining the blip relative to the average of all categories: \\[\\bar{Q}_{0,a}^{pblip-avg}(V) \\equiv E_0(Y_a- \\frac{1}{n_A} \\sum_{a \\in \\mathcal{A}} Y_a|V)\\] Blip3 reflects an extension of Blip2, where the average is now a weighted average: \\[\\bar{Q}_{0,a}^{pblip-wavg}(V) \\equiv E_0(Y_a- \\frac{1}{n_A} \\sum_{a \\in \\mathcal{A}} Y_{a} P(A=a|V) |V)\\] 5.6.1 Evaluating the Causal Effect of an optimal ITR with Categorical Treatment While the procedure is analogous to the previously described binary treatment, we now need to pay attention to the type of blip we define in the estimation stage, as well as how we construct our learners. 5.6.1.1 Simulated Data First, we load the simulated data. Here, our data generating distribution was of the following form: \\[W \\sim \\mathcal{N}(\\bf{0},I_{4 \\times 4})\\] \\[P(A|W) = \\frac{1}{1+\\exp^{(-(0.05*I(A=1)*W_1+0.8*I(A=2)*W_1+0.8*I(A=3)*W_1))}}\\] \\[P(Y|A,W) = 0.5\\text{logit}^{-1}[15I(A=1)(W_1-0.5) - 3I(A=2)(2W_1+0.5) \\\\ + 3I(A=3)(3W_1-0.5)] +\\text{logit}^{-1}(W_2W_1)\\] We can just load the data available as part of the package as follows: data(&quot;data_cat_realistic&quot;) The above composes our observed data structure \\(O = (W, A, Y)\\). Note that the mean under the true optimal rule is \\(\\psi=0.658\\), which is the quantity we aim to estimate. # organize data and nodes for tmle3 data &lt;- data_cat_realistic node_list &lt;- list( W = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;), A = &quot;A&quot;, Y = &quot;Y&quot; ) 5.6.1.2 Constructing Optimal Stacked Regressions with sl3 QUESTION: With categorical treatment, what is the dimension of the blip now? How would we go about estimating it? # Initialize few of the learners: lrn_xgboost_50 &lt;- Lrnr_xgboost$new(nrounds = 50) lrn_xgboost_100 &lt;- Lrnr_xgboost$new(nrounds = 100) lrn_xgboost_500 &lt;- Lrnr_xgboost$new(nrounds = 500) lrn_mean &lt;- Lrnr_mean$new() lrn_glm &lt;- Lrnr_glm_fast$new() ## Define the Q learner, which is just a regular learner: Q_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm), metalearner = Lrnr_nnls$new() ) # Define the g learner, which is a multinomial learner: #specify the appropriate loss of the multinomial learner: mn_metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_multinomial, learner_function = metalearner_linear_multinomial) g_learner &lt;- make_learner(Lrnr_sl, list(lrn_xgboost_100,lrn_xgboost_500,lrn_mean), mn_metalearner) # Define the Blip learner, which is a multivariate learner: learners &lt;- list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm) b_learner &lt;- create_mv_learners(learners = learners) We generate three different ensemble learners that must be fit, corresponding to the learners for the outcome regression, propensity score, and the blip function. Note that we need to estimate \\(g_0(A|W)\\) for a categorical \\(A\\)- therefore we use the multinomial Super Learner option available within the sl3 package with learners that can address multi-class classification problems. In order to see which learners can be used to estimate \\(g_0(A|W)\\) in sl3, we run the following: # See which learners support multi-class classification: sl3_list_learners(c(&quot;categorical&quot;)) [1] &quot;Lrnr_bartMachine&quot; &quot;Lrnr_dbarts&quot; [3] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [5] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [7] &quot;Lrnr_independent_binomial&quot; &quot;Lrnr_mean&quot; [9] &quot;Lrnr_multivariate&quot; &quot;Lrnr_optim&quot; [11] &quot;Lrnr_randomForest&quot; &quot;Lrnr_ranger&quot; [13] &quot;Lrnr_rpart&quot; &quot;Lrnr_solnp&quot; [15] &quot;Lrnr_svm&quot; &quot;Lrnr_xgboost&quot; # specify outcome and treatment regressions and create learner list learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) 5.6.1.3 Targeted Estimation of the Mean under the Optimal Individualized Interventions Effects # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.5419075 0.5743935 0.06954039 0.4380968 0.7106902 psi_transformed lower_transformed upper_transformed 1: 0.5743935 0.4380968 0.7106902 # How many individuals got assigned each treatment? table(tmle_spec$return_rule) 1 2 3 435 386 179 We can see that the confidence interval covers our true mean under the true optimal individualized treatment. NOTICE the distribution of the assigned treatment! We will need this shortly. 5.7 Extensions to Causal Effect of an OIT We consider two extensions to the procedure described for estimating the value of the ITR. The first one considers a setting where the user might be interested in a grid of possible suboptimal rules, corresponding to potentially limited knowledge of potential effect modifiers (Simpler Rules). The second extension concerns implementation of realistic optimal individual interventions where certain regimes might be preferred, but due to practical or global positivity restraints are not realistic to implement (Realistic Interventions). 5.7.1 Simpler Rules In order to not only consider the most ambitious fully \\(V\\)-optimal rule, we define \\(S\\)-optimal rules as the optimal rule that considers all possible subsets of \\(V\\) covariates, with card(\\(S\\)) \\(\\leq\\) card(\\(V\\)) and \\(\\emptyset \\in S\\). This allows us to consider sub-optimal rules that are easier to estimate and potentially provide more realistic rules- as such, we allow for statistical inference for the counterfactual mean outcome under the sub-optimal rule. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W4&quot;, &quot;W3&quot;, &quot;W2&quot;, &quot;W1&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = FALSE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=W3,W2,W1}] 0.5532473 0.6224703 0.06984271 0.4855811 0.7593595 psi_transformed lower_transformed upper_transformed 1: 0.6224703 0.4855811 0.7593595 Even though the user specified all baseline covariates as the basis for rule estimation, a simpler rule is sufficient to maximize the mean under the optimal individualized treatment! QUESTION: Why do you think the estimate if higher under the less complex rule? How does the set of covariates picked by tmle3mopttx compare to the baseline covariates the true rule depends on? 5.7.2 Realistic Optimal Individual Regimes tmle3mopttx also provides an option to estimate the mean under the realistic, or implementable, optimal individualized treatment. It is often the case that assigning particular regime might have the ability to fully maximize (or minimize) the desired outcome, but due to global or practical positivity constrains, such treatment can never be implemented in real life (or is highly unlikely). Specifying realistic=&quot;TRUE&quot;, we consider possibly suboptimal treatments that optimize the outcome in question while being supported by the data. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W4&quot;, &quot;W3&quot;, &quot;W2&quot;, &quot;W1&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = TRUE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.5399896 0.658066 0.02136231 0.6161966 0.6999353 psi_transformed lower_transformed upper_transformed 1: 0.658066 0.6161966 0.6999353 # How many individuals got assigned each treatment? table(tmle_spec$return_rule) 2 3 509 491 QUESTION: Referring back to the data-generating distribution, why do you think the distribution of allocated treatment changed from the distribution we had under the “non-realistic”&quot; rule? 5.7.3 Variable Importance Analysis In the previous sections we have seen how to obtain a contrast between the mean under the optimal individualized rule and the mean under the observed outcome for a single covariate. We are now ready to run the variable importance analysis for all of our observed covariates! In order to run tmle3mopttx variable importance measure, we need considered covariates to be categorical variables. For illustration purpose, we bin baseline covariates corresponding to the data-generating distribution described in the previous section: # bin baseline covariates to 3 categories: data$W1&lt;-ifelse(data$W1&lt;quantile(data$W1)[2],1,ifelse(data$W1&lt;quantile(data$W1)[3],2,3)) node_list &lt;- list( W = c(&quot;W3&quot;, &quot;W4&quot;, &quot;W2&quot;), A = c(&quot;W1&quot;, &quot;A&quot;), Y = &quot;Y&quot; ) Note that our node list now includes \\(W_1\\) as treatments as well! Don’t worry, we will still properly adjust for all baseline covariates when considering \\(A\\) as treatment. 5.7.3.1 Variable Importance using Targeted Estimation of the value of the ITR We will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle3_mopttx_vim. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_vim( V=c(&quot;W2&quot;), type = &quot;blip2&quot;, learners = learner_list, contrast = &quot;multiplicative&quot;, maximize = FALSE, method = &quot;SL&quot;, complex = TRUE, realistic = FALSE ) # fit the TML estimator vim_results &lt;- tmle3_vim(tmle_spec, data, node_list, learner_list, adjust_for_other_A = TRUE ) print(vim_results) type param init_est tmle_est se 1: RR RR(E[Y_{A=NULL}]/E[Y]) -0.001412328 0.06543250 0.03353099 2: RR RR(E[Y_{A=NULL}]/E[Y]) -0.022790409 -0.07453286 0.05022239 lower upper psi_transformed lower_transformed upper_transformed 1: -0.0002870398 0.13115203 1.067621 0.9997130 1.140141 2: -0.1729669353 0.02390121 0.928177 0.8411654 1.024189 A W Z_stat p_nz p_nz_corrected 1: A W3,W4,W2,W1 1.951404 0.02550453 0.05100906 2: W1 W3,W4,W2,A -1.484057 0.06889696 0.06889696 The final result of tmle3_vim with the tmle3mopttx spec is an ordered list of mean outcomes under the optimal individualized treatment for all categorical covariates in our dataset. 5.8 Exercise 5.8.1 Real World Data and tmle3mopttx Finally, we cement everything we learned so far with a real data application. As in the previous sections, we will be using the WASH Benefits data, corresponding to the Effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh trial. The main aim of the cluster-randomized controlled trial was to assess the impact of six intervention groups, including: Control Handwashing with soap Improved nutrition through counselling and provision of lipid-based nutrient supplements Combined water, sanitation, handwashing, and nutrition. Improved sanitation Combined water, sanitation, and handwashing Chlorinated drinking water We aim to estimate the optimal ITR and the corresponding value under the optimal ITR for the main intervention in WASH Benefits data! Our outcome of interest is the weight-for-height Z-score, whereas our treatment is the six intervention groups aimed at improving living conditions. Work with a buddy. You have 20 minutes. In the etherpad, submit your group’s answers to the following questions. Define \\(V\\) as mother’s education (momedu), current living conditions (floor), and possession of material items including the refrigerator (asset_refrig). Why do you think we use these covariates as \\(V\\)? Do we want to minimize or maximize the outcome? Which blip type should we use? Construct an approprite sl3 library for \\(A\\), \\(Y\\) and \\(B\\). Based on the \\(V\\) defined in the previous question, estimate the mean under the ITR for the main randomized intervention used in the WASH Benefits trial with weight-for-height Z-score as the outcome. What’s the TMLE value of the optimal ITR? How does it change from the initial estimate? Which intervention is the most dominant? Why do you think that is? Using the same formulation as in questions 1 and 2, estimate the realistic optimal ITR and the corresponding value of the realistic ITR. Did the results change? Which intervention is the most dominant under realistic rules? Why do you think that is? 5.9 Summary In summary, the mean outcome under the optimal individualized treatment is a counterfactual quantity of interest representing what the mean outcome would have been if everybody, contrary to the fact, received treatment that optimized their outcome. tmle3mopttx estimates the mean outcome under the optimal individualized treatment, where the candidate rules are restricted to only respond to a user-supplied subset of the baseline and intermediate covariates. In addition it provides options for realistic, data-adaptive interventions. In essence, our target parameter answers the key aim of precision medicine: allocating the available treatment by tailoring it to the individual characteristics of the patient, with the goal of optimizing the final outcome. 5.9.1 Solutions To start, let’s load the data, convert all columns to be of class numeric, and take a quick look at it: washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) washb_data &lt;- washb_data[!is.na(momage), lapply(.SD, as.numeric)] head(washb_data, 3) As before, we specify the NPSEM via the node_list object. node_list &lt;- list(W = names(washb_data)[!(names(washb_data) %in% c(&quot;whz&quot;, &quot;tr&quot;))], A = &quot;tr&quot;, Y = &quot;whz&quot;) We pick few potential effect modifiers, including mother’s education, current living conditions (floor), and possession of material items including the refrigerator. We concentrate of these covariates as they might be indicative of the socio-economic status of individuals involved in the trial. We can explore the distribution of our \\(V\\), \\(A\\) and \\(Y\\): #V1, V2 and V3: table(washb_data$momedu) table(washb_data$floor) table(washb_data$asset_refrig) #A: table(washb_data$tr) #Y: summary(washb_data$whz) We specify a simply library for the outcome regression, propensity score and the blip function. Since our treatment is categorical, we need to define a multinomial learner for \\(A\\) and multivariate learner for \\(B\\). We will define the xgboost over a grid of parameters, and initialize a mean learner. # Initialize few of the learners: grid_params = list(nrounds = c(100, 500), eta = c(0.01, 0.1)) grid = expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) xgb_learners = apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_xgboost$new, c(as.list(params_tune))) }) lrn_mean &lt;- Lrnr_mean$new() ## Define the Q learner, which is just a regular learner: Q_learner &lt;- Lrnr_sl$new( learners = list(xgb_learners[[1]], xgb_learners[[2]], xgb_learners[[3]], xgb_learners[[4]], lrn_mean), metalearner = Lrnr_nnls$new() ) # Define the g learner, which is a multinomial learner: #specify the appropriate loss of the multinomial learner: mn_metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_multinomial, learner_function = metalearner_linear_multinomial) g_learner &lt;- make_learner(Lrnr_sl, list(xgb_learners[[4]], lrn_mean), mn_metalearner) # Define the Blip learner, which is a multivariate learner: learners &lt;- list(xgb_learners[[1]], xgb_learners[[2]], xgb_learners[[3]], xgb_learners[[4]], lrn_mean) b_learner &lt;- create_mv_learners(learners = learners) learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) As seen before, we initialize the tmle3_mopttx_blip_revere Specn in order to answer Question 1. We want to maximize our outcome, with higher the weight-for-height Z-score the better. We will also use blip2 as the blip type, but note that we could have used blip1 as well since “Control” is a good reference category. ## Question 2: #Initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;momedu&quot;, &quot;floor&quot;, &quot;asset_refrig&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) #Fit the TML estimator. fit &lt;- tmle3(tmle_spec, data=washb_data, node_list, learner_list) fit #Which intervention is the most dominant? table(tmle_spec$return_rule) Using the same formulation as before, we estimate the realistic optimal ITR and the corresponding value of the realistic ITR: ## Question 3: #Initialize a tmle specification with &quot;realistic=TRUE&quot;: tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;momedu&quot;, &quot;floor&quot;, &quot;asset_refrig&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = TRUE ) #Fit the TML estimator. fit &lt;- tmle3(tmle_spec, data=washb_data, node_list, learner_list) fit table(tmle_spec$return_rule) "],
["stochastic-treatment-regimes.html", "Chapter 6 Stochastic Treatment Regimes 6.1 Learning Objectives 6.2 Introduction 6.3 Stochastic Interventions 6.4 Estimating the Causal Effect of a Stochastic Intervention with tmle3shift 6.5 Stochastic Interventions over a Grid of Counterfactual Shifts 6.6 Exercises", " Chapter 6 Stochastic Treatment Regimes Nima Hejazi Based on the tmle3shift R package by Nima Hejazi, Jeremy Coyle, and Mark van der Laan. Updated: 2019-05-22 6.1 Learning Objectives Differentiate stochastic treatment regimes from static, dynamic, and optimal treatment regimes. Describe how estimating causal effects of stochastic interventions informs a real-world data analysis. Contrast a population level stochastic intervention policy from a modified treatment policy. Estimate causal effects under stochastic treatment regimes with the tmle3shift R package. Specify a grid of counterfactual shift interventions to be used for defining a set of stochastic intervention policies. Interpret a set of effect estimates from a grid of counterfactual shift interventions. Construct marginal structural models to measure variable importance in terms of stochastic interventions, using a grid of shift interventions. Implement a shift intervention at the individual level, to facilitate shifting each individual to a value that’s supported by the data. Define novel shift intervention functions to extend the tmle3shift R package. 6.2 Introduction In this section, we examine a simple example of stochastic treatment regimes in the context of a continuous treatment variable of interest, defining an intuitive causal effect through which to examine stochastic interventions more generally. As a first step to using stochastic treatment regimes in practice, we present the tmle3shift R package, which features an implementation of a recently developed algorithm for computing targeted minimum loss-based estimates of a causal effect based on a stochastic treatment regime that shifts the natural value of the treatment based on a shifting function \\(d(A,W)\\). We will also use tmle3shift to construct marginal structural models for variable importance measures, implement shift interventions at the individual level, and define novel shift intervention functions. 6.3 Stochastic Interventions Present a relatively simple yet extremely flexible manner by which realistic causal effects (and contrasts thereof) may be defined. May be applied to nearly any manner of treatment variable – continuous, ordinal, categorical, binary – allowing for a rich set of causal effects to be defined through this formalism. Arguably the most general of the classes of interventions through which causal effects may be defined, and are conceptually simple. We may consider stochastic interventions in two ways: The equation \\(f_A\\), which produces \\(A\\), is replaced by a probabilistic mechanism \\(g_{\\delta}(A \\mid W)\\) that differs from the original \\(g(A \\mid W)\\). The stochastically modified value of the treatment \\(A_{\\delta}\\) is drawn from a user-specified distribution \\(g_\\delta(A \\mid W)\\), which may depend on the original distribution \\(g(A \\mid W)\\) and is indexed by a user-specified parameter \\(\\delta\\). In this case, the stochastically modified value of the treatment \\(A_{\\delta} \\sim g_{\\delta}(\\cdot \\mid W)\\). The observed value \\(A\\) is replaced by a new value \\(A_{d(A,W)}\\) based on applying a user-defined function \\(d(A,W)\\) to \\(A\\). In this case, the stochastic treatment regime may be viewed as an intervention in which \\(A\\) is set equal to a value based on a hypothetical regime \\(d(A, W)\\), where regime \\(d\\) depends on the treatment level \\(A\\) that would be assigned in the absence of the regime as well as the covariates \\(W\\). Stochastic interventions of this variety may be referred to as depending on the natural value of treatment or as modified treatment policies (Haneuse and Rotnitzky 2013; Young, Hernán, and Robins 2014). 6.3.1 Identifying the Causal Effect of a Stochastic Intervention The stochastic intervention generates a counterfactual random variable \\(Y_{d(A,W)} := f_Y(d(A,W), W, U_Y) \\equiv Y_{g_{\\delta}} := f_Y(A_{\\delta}, W, U_Y)\\), where \\(Y_{d(A,W)} \\sim \\mathcal{P}_0^{\\delta}\\). The target causal estimand of our analysis is \\(\\psi_{0, \\delta} := \\mathbb{E}_{P_0^{\\delta}}\\{Y_{d(A,W)}\\}\\), the mean of the counterfactual outcome variable \\(Y_{d(A, W)}\\). The statistical target parameter may also be denoted \\(\\Psi(P_0) = \\mathbb{E}_{P_0}{\\overline{Q}(d(A, W), W)}\\), where \\(\\overline{Q}(d(A, W), W)\\) is the counterfactual outcome value of a given individual under the stochastic intervention distribution (Díaz and van der Laan 2018). In prior work, Díaz and van der Laan (2012) showed that the causal quantity of interest \\(\\mathbb{E}_0 \\{Y_{d(A, W)}\\}\\) is identified by a functional of the distribution of \\(O\\): \\[\\begin{align*}\\label{eqn:identification2012} \\psi_{0,d} = \\int_{\\mathcal{W}} \\int_{\\mathcal{A}} &amp; \\mathbb{E}_{P_0} \\{Y \\mid A = d(a, w), W = w\\} \\cdot \\\\ &amp;q_{0, A}^O(a \\mid W = w) \\cdot q_{0, W}^O(w) d\\mu(a)d\\nu(w). \\end{align*}\\] The four standard assumptions presented in are necessary in order to establish identifiability of the causal parameter from the observed data via the statistical functional. These were Consistency: \\(Y^{d(a_i, w_i)}_i = Y_i\\) in the event \\(A_i = d(a_i, w_i)\\), for \\(i = 1, \\ldots, n\\) Stable unit value treatment assumption (SUTVA): \\(Y^{d(a_i, w_i)}_i\\) does not depend on \\(d(a_j, w_j)\\) for \\(i = 1, \\ldots, n\\) and \\(j \\neq i\\), or lack of interference (Rubin 1978, 1980). Strong ignorability: \\(A_i \\indep Y^{d(a_i, w_i)}_i \\mid W_i\\), for \\(i = 1, \\ldots, n\\). Positivity (or overlap)_: \\(a_i \\in \\mathcal{A} \\implies d(a_i, w_i) \\in \\mathcal{A}\\) for all \\(w \\in \\mathcal{W}\\), where \\(\\mathcal{A}\\) denotes the support of \\(A \\mid W = w_i \\quad \\forall i = 1, \\ldots n\\). With the identification assumptions satisfied, Díaz and van der Laan (2012) and Díaz and van der Laan (2018) provide an efficient influence function with respect to the nonparametric model \\(\\mathcal{M}\\) as \\[\\begin{equation*}\\label{eqn:eif} D(P_0)(x) = H(a, w)({y - \\overline{Q}(a, w)}) + \\overline{Q}(d(a, w), w) - \\Psi(P_0), \\end{equation*}\\] where the auxiliary covariate \\(H(a,w)\\) may be expressed \\[\\begin{equation*}\\label{eqn:aux_covar_full} H(a,w) = \\mathbb{I}(a + \\delta &lt; u(w)) \\frac{g_0(a - \\delta \\mid w)} {g_0(a \\mid w)} + \\mathbb{I}(a + \\delta \\geq u(w)), \\end{equation*}\\] which may be reduced to \\[\\begin{equation*}\\label{eqn:aux_covar_simple} H(a,w) = \\frac{g_0(a - \\delta \\mid w)}{g_0(a \\mid w)} + 1 \\end{equation*}\\] in the case that the treatment is in the limits that arise from conditioning on \\(W\\), i.e., for \\(A_i \\in (u(w) - \\delta, u(w))\\). 6.3.2 Interpreting the Causal Effect of a Stochastic Intervention Figure 6.1: Animation of how a counterfactual outcome changes as the natural treatment distribution is subjected to a simple stochastic intervention 6.4 Estimating the Causal Effect of a Stochastic Intervention with tmle3shift We use tmle3shift to construct a targeted maximum likelihood (TML) estimator of of a causal effect of a stochastic treatment regime that shifts the natural value of the treatment based on a shifting function \\(d(A,W)\\). We will follow the recipe provided by Díaz and van der Laan (2018), tailored to the tmle3 framework: Construct initial estimators \\(g_n\\) of \\(g_0(A, W)\\) and \\(Q_n\\) of \\(\\overline{Q}_0(A, W)\\), perhaps using data-adaptive regression techniques. For each observation \\(i\\), compute an estimate \\(H_n(a_i, w_i)\\) of the auxiliary covariate \\(H(a_i,w_i)\\). Estimate the parameter \\(\\epsilon\\) in the logistic regression model \\[ \\text{logit}\\overline{Q}_{\\epsilon, n}(a, w) = \\text{logit}\\overline{Q}_n(a, w) + \\epsilon H_n(a, w),\\] or an alternative regression model incorporating weights. Compute TML estimator \\(\\Psi_n\\) of the target parameter, defining update \\(\\overline{Q}_n^{\\star}\\) of the initial estimate \\(\\overline{Q}_{n, \\epsilon_n}\\): \\[\\begin{equation*}\\label{eqn:tmle} \\Psi_n = \\Psi(P_n^{\\star}) = \\frac{1}{n} \\sum_{i = 1}^n \\overline{Q}_n^{\\star}(d(A_i, W_i), W_i). \\end{equation*}\\] To start, let’s load the packages we’ll use and set a seed for simulation: library(tidyverse) library(data.table) library(condensier) library(sl3) library(tmle3) library(tmle3shift) set.seed(429153) 1. Construct initial estimators \\(g_n\\) of \\(g_0(A, W)\\) and \\(Q_n\\) of \\(\\overline{Q}_0(A, W)\\). We need to estimate two components of the likelihood in order to construct a TML estimator. The outcome regression, \\(\\hat{Q}_n\\), which is a simple regression of the form \\(\\mathbb{E}[Y \\mid A,W]\\). # learners used for conditional expectation regression lrn_mean &lt;- Lrnr_mean$new() lrn_fglm &lt;- Lrnr_glm_fast$new() lrn_xgb &lt;- Lrnr_xgboost$new(nrounds = 200) sl_lrn &lt;- Lrnr_sl$new( learners = list(lrn_mean, lrn_fglm, lrn_xgb), metalearner = Lrnr_nnls$new() ) The treatment mechanism, \\(\\hat{g}_n\\), i.e., the propensity score. In the case of a continuous intervention, such a quantity is a conditional density. Generally speaking, conditional density estimation is a challenging problem that has received much attention in the literature. To estimate the treatment mechanism, we must make use of learning algorithms specifically suited to conditional density estimation; a list of such learners may be extracted from sl3 by using sl3_list_learners(): sl3_list_learners(&quot;density&quot;) [1] &quot;Lrnr_condensier&quot; &quot;Lrnr_haldensify&quot; &quot;Lrnr_rfcde&quot; [4] &quot;Lrnr_solnp_density&quot; To proceed, we’ll select two of the above learners, Lrnr_haldensify for using the highly adaptive lasso for conditional density estimation, based on an algorithm given by Díaz and van der Laan (2011) and implemented in Hejazi and Benkeser (2019), and Lrnr_rfcde, an approach for using random forests for conditional density estimation (Pospisil and Lee 2018). A Super Learner may be constructed by pooling estimates from each of these modified conditional density regression techniques. # learners used for conditional density regression (i.e., propensity score) lrn_haldensify &lt;- Lrnr_haldensify$new( n_bins = 5, grid_type = &quot;equal_mass&quot;, lambda_seq = exp(seq(-1, -13, length = 500)) ) lrn_rfcde &lt;- Lrnr_rfcde$new( n_trees = 1000, node_size = 5, n_basis = 31, output_type = &quot;observed&quot; ) sl_lrn_dens &lt;- Lrnr_sl$new( learners = list(lrn_haldensify, lrn_rfcde), metalearner = Lrnr_solnp_density$new() ) Finally, we construct a learner_list object for use in constructing a TML estimator of our target parameter of interest: Q_learner &lt;- sl_lrn g_learner &lt;- sl_lrn_dens learner_list &lt;- list(Y = Q_learner, A = g_learner) 6.4.1 Simulate Data # simulate simple data for tmle-shift sketch n_obs &lt;- 1000 # number of observations tx_mult &lt;- 2 # multiplier for the effect of W = 1 on the treatment ## baseline covariates -- simple, binary W &lt;- replicate(2, rbinom(n_obs, 1, 0.5)) ## create treatment based on baseline W A &lt;- rnorm(n_obs, mean = tx_mult * W, sd = 1) ## create outcome as a linear function of A, W + white noise Y &lt;- rbinom(n_obs, 1, prob = plogis(A + W)) # organize data and nodes for tmle3 data &lt;- data.table(W, A, Y) setnames(data, c(&quot;W1&quot;, &quot;W2&quot;, &quot;A&quot;, &quot;Y&quot;)) node_list &lt;- list(W = c(&quot;W1&quot;, &quot;W2&quot;), A = &quot;A&quot;, Y = &quot;Y&quot;) head(data) W1 W2 A Y 1: 1 1 3.5806529 1 2: 1 0 3.2071846 1 3: 1 1 1.0358382 1 4: 0 0 -0.6578495 1 5: 1 1 3.0199033 1 6: 1 1 2.7803127 1 We now have an observed data structure (data) and a specification of the role that each variable in the data set plays as the nodes in a directed acyclic graph (DAG) via nonparametric structural equation models (NPSEMs). To start, we will initialize a specification for the TMLE of our parameter of interest (a tmle3_Spec in the tlverse nomenclature) simply by calling tmle_shift. We specify the argument shift_val = 0.5 when initializing the tmle3_Spec object to communicate that we’re interested in a shift of \\(0.5\\) on the scale of the treatment \\(A\\) – that is, we specify \\(\\delta = 0.5\\). # initialize a tmle specification tmle_spec &lt;- tmle_shift( shift_val = 0.5, shift_fxn = shift_additive_bounded, shift_fxn_inv = shift_additive_bounded_inv ) As seen above, the tmle_shift specification object (like all tmle3_Spec objects) does not store the data for our specific analysis of interest. Later, we’ll see that passing a data object directly to the tmle3 wrapper function, alongside the instantiated tmle_spec, will serve to construct a tmle3_Task object internally (see the tmle3 documentation for details). Note that in the initialization of the tmle3_Spec, we specified a shifting function shift_additive_bounded (and its inverse). This shifting function corresponds to a stochastic regime slightly more complicated than that initially considered in Díaz and van der Laan (2018). In particular, shift_additive_bounded is encapsulates a procedure that determines an acceptable set of shifting values for the shift \\(\\delta\\), allowing for the observed treatment value of a given observation to be shifted if the auxiliary covariate \\(H_n\\) is bounded by a constant and not shifting the given observation if this criterion does not hold. We discuss this in greater detail in the sequel. 6.4.2 Targeted Estimation of Stochastic Interventions Effects tmle_fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) Iter: 1 fn: 1374.0496 Pars: 0.80784 0.19216 Iter: 2 fn: 1374.0496 Pars: 0.80784 0.19216 solnp--&gt; Completed in 2 iterations tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.7957592 0.7976214 0.01245131 0.7732172 0.8220255 psi_transformed lower_transformed upper_transformed 1: 0.7976214 0.7732172 0.8220255 The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 6.5 Stochastic Interventions over a Grid of Counterfactual Shifts Consider an arbitrary scalar \\(\\delta\\) that defines a counterfactual outcome \\(\\psi_n = Q_n(d(A, W), W)\\), where, for simplicity, let \\(d(A, W) = A + \\delta\\). A simplified expression of the auxiliary covariate for the TMLE of \\(\\psi\\) is \\(H_n = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)}\\), where \\(g^{\\star}(a \\mid w)\\) defines the treatment mechanism with the stochastic intervention implemented. In this manner, we can specify a grid of shifts \\(\\delta\\) to define a set of stochastic intervention policies in an a priori manner. To ascertain whether a given choice of the shift \\(\\delta\\) is acceptable, let there be a bound \\(C(\\delta) = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)} &lt; M\\), where \\(g^{\\star}(a \\mid w)\\) is a function of \\(\\delta\\) in part, and \\(M\\) is a user-specified upper bound of \\(C(\\delta)\\). Then, \\(C(\\delta)\\) is a measure of the influence of a given observation (under a bound of the ratio of the conditional densities), which provides a way to limit the maximum influence of a given observation through a choice of the shift \\(\\delta\\). For the purpose of using such a shift in practice, the present software provides the functions shift_additive_bounded and shift_additive_bounded_inv, which define a variation of this shift: \\[\\begin{equation} \\delta(a, w) = \\begin{cases} \\delta, &amp; C(\\delta) \\leq M \\\\ 0, \\text{otherwise} \\\\ \\end{cases}, \\end{equation}\\] which corresponds to an intervention in which the natural value of treatment of a given observational unit is shifted by a value \\(\\delta\\) in the case that the ratio of the intervened density \\(g^{\\star}(a \\mid w)\\) to the natural density \\(g(a \\mid w)\\) (that is, \\(C(\\delta)\\)) does not exceed a bound \\(M\\). In the case that the ratio \\(C(\\delta)\\) exceeds the bound \\(M\\), the stochastic intervention policy does not apply to the given unit and they remain at their natural value of treatment \\(a\\). 6.5.1 Initializing vimshift through its tmle3_Spec To start, we will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle_shift. We specify the argument shift_grid = seq(-1, 1, by = 1) when initializing the tmle3_Spec object to communicate that we’re interested in assessing the mean counterfactual outcome over a grid of shifts -1, 0, 1 on the scale of the treatment \\(A\\). # what&#39;s the grid of shifts we wish to consider? delta_grid &lt;- seq(from = -1, to = 1, by = 1) # initialize a tmle specification tmle_spec &lt;- tmle_vimshift_delta( shift_grid = delta_grid, max_shifted_ratio = 2 ) 6.5.2 Targeted Estimation of Stochastic Intervention Effects One may walk through the step-by-step procedure for fitting the TML estimator of the mean counterfactual outcome under each shift in the grid, using the machinery exposed by the tmle3 R package, or simply invoke the tmle3 wrapper function to fit the series of TML estimators (one for each parameter defined by the grid delta) in a single function call. For convenience, we choose the latter: tmle_fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) Iter: 1 fn: 1374.2713 Pars: 0.80758 0.19242 Iter: 2 fn: 1374.2713 Pars: 0.80758 0.19242 solnp--&gt; Completed in 2 iterations tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: TSM E[Y_{A=NULL}] 0.6301156 0.6287602 0.014175785 0.60097620 2: TSM E[Y_{A=NULL}] 0.7390804 0.7395944 0.014022943 0.71210993 3: TSM E[Y_{A=NULL}] 0.8434465 0.8460525 0.010264210 0.82593500 4: MSM_linear MSM(intercept) 0.7374241 0.7380196 0.012135976 0.71423353 5: MSM_linear MSM(slope) 0.1064544 0.1084547 0.004464429 0.09970461 upper psi_transformed lower_transformed upper_transformed 1: 0.6565443 0.6287602 0.60097620 0.6565443 2: 0.7670789 0.7395944 0.71210993 0.7670789 3: 0.8661700 0.8460525 0.82593500 0.8661700 4: 0.7618057 0.7380196 0.71423353 0.7618057 5: 0.1172048 0.1084547 0.09970461 0.1172048 Remark: The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 6.5.3 Inference with Marginal Structural Models Since we consider estimating the mean counterfactual outcome \\(\\psi_n\\) under several values of the intervention \\(\\delta\\), taken from the aforementioned \\(\\delta\\)-grid, one approach for obtaining inference on a single summary measure of these estimated quantities involves leveraging working marginal structural models (MSMs). Summarizing the estimates \\(\\psi_n\\) through a working MSM allows for inference on the trend imposed by a \\(\\delta\\)-grid to be evaluated via a simple hypothesis test on a parameter of this working MSM. Letting \\(\\psi_{\\delta}(P_0)\\) be the mean outcome under a shift \\(\\delta\\) of the treatment, we have \\(\\vec{\\psi}_{\\delta} = (\\psi_{\\delta}: \\delta)\\) with corresponding estimators \\(\\vec{\\psi}_{n, \\delta} = (\\psi_{n, \\delta}: \\delta)\\). Further, let \\(\\beta(\\vec{\\psi}_{\\delta}) = \\phi((\\psi_{\\delta}: \\delta))\\). By a straightforward application of the delta method (discussed previously), we may write the efficient influence function of the MSM parameter \\(\\beta\\) in terms of the EIFs of each of the corresponding point estimates. Based on this, inference from a working MSM is rather straightforward. To wit, the limiting distribution for \\(m_{\\beta}(\\delta)\\) may be expressed \\[\\sqrt{n}(\\beta_n - \\beta_0) \\to N(0, \\Sigma),\\] where \\(\\Sigma\\) is the empirical covariance matrix of \\(\\text{EIF}_{\\beta}(O)\\). tmle_fit$summary[4:5, ] type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.7374241 0.7380196 0.012135976 0.71423353 2: MSM_linear MSM(slope) 0.1064544 0.1084547 0.004464429 0.09970461 upper psi_transformed lower_transformed upper_transformed 1: 0.7618057 0.7380196 0.71423353 0.7618057 2: 0.1172048 0.1084547 0.09970461 0.1172048 6.5.4 Directly Targeting the MSM Parameter \\(\\beta\\) Note that in the above, a working MSM is fit to the individual TML estimates of the mean counterfactual outcome under a given value of the shift \\(\\delta\\) in the supplied grid. The parameter of interest \\(\\beta\\) of the MSM is asymptotically linear (and, in fact, a TML estimator) as a consequence of its construction from individual TML estimators. In smaller samples, it may be prudent to perform a TML estimation procedure that targets the parameter \\(\\beta\\) directly, as opposed to constructing it from several independently targeted TML estimates. An approach for constructing such an estimator is proposed in the sequel. Suppose a simple working MSM \\(\\mathbb{E}Y_{g^0_{\\delta}} = \\beta_0 + \\beta_1 \\delta\\), then a TML estimator targeting \\(\\beta_0\\) and \\(\\beta_1\\) may be constructed as \\[\\overline{Q}_{n, \\epsilon}(A,W) = \\overline{Q}_n(A,W) + \\epsilon (H_1(g), H_2(g),\\] for all \\(\\delta\\), where \\(H_1(g)\\) is the auxiliary covariate for \\(\\beta_0\\) and \\(H_2(g)\\) is the auxiliary covariate for \\(\\beta_1\\). To construct a targeted maximum likelihood estimator that directly targets the parameters of the working marginal structural model, we may use the tmle_vimshift_msm Spec (instead of the tmle_vimshift_delta Spec that appears above): # initialize a tmle specification tmle_msm_spec &lt;- tmle_vimshift_msm( shift_grid = delta_grid, max_shifted_ratio = 2 ) # fit the TML estimator and examine the results tmle_msm_fit &lt;- tmle3(tmle_msm_spec, data, node_list, learner_list) Iter: 1 fn: 1378.4273 Pars: 0.78175 0.21825 Iter: 2 fn: 1378.4273 Pars: 0.78175 0.21825 solnp--&gt; Completed in 2 iterations tmle_msm_fit A tmle3_Fit that took 100 step(s) type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.7372135 0.7368102 0.013240370 0.71085951 2: MSM_linear MSM(slope) 0.1067264 0.1065003 0.005919883 0.09489755 upper psi_transformed lower_transformed upper_transformed 1: 0.7627608 0.7368102 0.71085951 0.7627608 2: 0.1181031 0.1065003 0.09489755 0.1181031 6.5.5 Example with the WASH Benefits Data To complete our walk through, let’s turn to using stochastic interventions to investigate the data from the WASH Benefits trial. To start, let’s load the data, convert all columns to be of class numeric, and take a quick look at it washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data_subset.csv&quot;, stringsAsFactors = TRUE) washb_data &lt;- washb_data[!is.na(momage), lapply(.SD, as.numeric)] head(washb_data, 3) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp 1: -0.94 2 14 7 237 2 21 2 146.00 1 1 25 2: -1.13 1 14 8 310 1 26 1 148.90 1 1 7 3: -1.61 1 16 3 162 2 25 2 153.75 1 0 15 watmin elec floor walls roof asset_wardrobe asset_table asset_chair 1: 2 1 0 1 1 0 1 0 2: 4 1 0 0 1 0 1 1 3: 2 0 0 1 1 0 1 0 asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto 1: 0 1 0 0 0 0 2: 0 1 0 0 0 0 3: 1 1 0 0 0 0 asset_sewmach asset_mobile 1: 0 0 2: 0 1 3: 0 0 Next, we specify our NPSEM via the node_list object. For our example analysis, we’ll consider the outcome to be the weight-for-height Z-score (as in previous sections), the intervention of interest to be the mother’s age at time of child’s birth, and take all other covariates to be potential confounders. node_list &lt;- list( W = names(washb_data)[!(names(washb_data) %in% c(&quot;whz&quot;, &quot;momage&quot;))], A = &quot;momage&quot;, Y = &quot;whz&quot; ) Were we to consider the counterfactual weight-for-height Z-score under shifts in the age of the mother at child’s birth, how would we interpret estimates of our parameter? To simplify our interpretation, consider a shift (up or down) of two years in the mother’s age (i.e., \\(\\delta = \\{-2, 0, 2\\}\\)); in this setting, a stochastic intervention would correspond to a policy advocating that potential mothers defer or accelerate plans of having a child for two calendar years, possibly implemented through an encouragement design deployed in a clinical setting. For this example, we’ll use the variable importance strategy of considering a grid of stochastic interventions to evaluate the weight-for-height Z-score under a shift in the mother’s age down by two years (\\(\\delta = -2\\)) through up by two years (\\(\\delta = 2\\)), incrementing by a single year between the two. To do this, we simply initialize a Spec tmle_vimshift_delta similar to how we did in a previous example: # initialize a tmle specification for the variable importance parameter washb_vim_spec &lt;- tmle_vimshift_delta( shift_grid = seq(from = -2, to = 2, by = 1), max_shifted_ratio = 2 ) Prior to running our analysis, we’ll modify the learner_list object we had created such that the density estimation procedure we rely on will be only the random forest conditional density estimation procedure of Pospisil and Lee (2018), as the nonparametric conditional density approach based on the highly adaptive lasso (Díaz and van der Laan 2011; Benkeser and van der Laan 2016; Coyle and Hejazi 2018; Hejazi and Benkeser 2019) is currently unable to accommodate large datasets. # learners used for conditional density regression (i.e., propensity score) lrn_rfcde &lt;- Lrnr_rfcde$new( n_trees = 250, node_size = 5, n_basis = 20, output_type = &quot;observed&quot; ) # we need to turn on cross-validation for the RFCDE learner lrn_cv_rfcde &lt;- Lrnr_cv$new( learner = lrn_rfcde, full_fit = TRUE ) # modify learner list, using existing SL for Q fit learner_list &lt;- list(Y = sl_lrn, A = lrn_cv_rfcde) Having made the above preparations, we’re now ready to estimate the counterfactual mean of the weight-for-height Z-score under a small grid of shifts in the mother’s age at child’s birth. Just as before, we do this through a simple call to our tmle3 wrapper function: washb_tmle_fit &lt;- tmle3(washb_vim_spec, washb_data, node_list, learner_list) washb_tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: TSM E[Y_{A=NULL}] -0.556860604 -0.58385148 0.052216227 -0.686193408 2: TSM E[Y_{A=NULL}] -0.560109090 -0.65387924 0.082895044 -0.816350539 3: TSM E[Y_{A=NULL}] -0.563357575 -0.57731822 0.171687842 -0.913820203 4: TSM E[Y_{A=NULL}] -0.566606060 -0.45631089 0.088098894 -0.628981546 5: TSM E[Y_{A=NULL}] -0.569854545 -0.52805090 0.066053006 -0.657512418 6: MSM_linear MSM(intercept) -0.563357575 -0.55520800 0.067698172 -0.687893976 7: MSM_linear MSM(slope) -0.003248485 0.02278249 0.009999054 0.003184706 upper psi_transformed lower_transformed upper_transformed 1: -0.48150956 -0.58385148 -0.686193408 -0.48150956 2: -0.49140794 -0.65387924 -0.816350539 -0.49140794 3: -0.24081623 -0.57731822 -0.913820203 -0.24081623 4: -0.28364023 -0.45631089 -0.628981546 -0.28364023 5: -0.39858939 -0.52805090 -0.657512418 -0.39858939 6: -0.42252202 -0.55520800 -0.687893976 -0.42252202 7: 0.04238028 0.02278249 0.003184706 0.04238028 6.6 Exercises Set the sl3 library of algorithms for the Super Learner to a simple, interpretable library and use this new library to estimate the counterfactual mean of mother’s age at child’s birth (momage) under a shift \\(\\delta = 0\\). What does this counterfactual mean equate to in terms of the observed data? Describe two (equivalent) ways in which the causal effects of stochastic interventions may be interpreted. Using a grid of values of the shift parameter \\(\\delta\\) (e.g., \\(\\{-1, 0, +1\\}\\)), repeat the analysis on the variable of interest (momage), summarizing the trend for this sequence of shifts using a marginal structural model. For either the grid of shifts in the example preceding the exercises or that estimated in (3) above, plot the resultant estimates against their respective counterfactual shifts. Graphically add to the scatterplot a line with slope and intercept equivalent to the MSM fit through the individual TML estimates. How does the marginal structural model we used to summarize the trend along the sequence of shifts previously help to contextualize the estimated effect for a single shift? That is, how does access to estimates across several shifts and the marginal structural model parameters allow us to more richly interpret our findings? References "],
["r6.html", "Chapter 7 A Primer on the R6 Class System 7.1 Classes, Fields, and Methods 7.2 Object Oriented Programming: Python and R", " Chapter 7 A Primer on the R6 Class System A central goal of the Targeted Learning statistical paradigm is to estimate scientifically relevant parameters in realistic (usually nonparametric) models. The tlverse is designed using basic OOP principles and the R6 OOP framework. While we’ve tried to make it easy to use the tlverse packages without worrying much about OOP, it is helpful to have some intuition about how the tlverse is structured. Here, we briefly outline some key concepts from OOP. Readers familiar with OOP basics are invited to skip this section. 7.1 Classes, Fields, and Methods The key concept of OOP is that of an object, a collection of data and functions that corresponds to some conceptual unit. Objects have two main types of elements: fields, which can be thought of as nouns, are information about an object, and methods, which can be thought of as verbs, are actions an object can perform. Objects are members of classes, which define what those specific fields and methods are. Classes can inherit elements from other classes (sometimes called base classes) – accordingly, classes that are similar, but not exactly the same, can share some parts of their definitions. Many different implementations of OOP exist, with variations in how these concepts are implemented and used. R has several different implementations, including S3, S4, reference classes, and R6. The tlverse uses the R6 implementation. In R6, methods and fields of a class object are accessed using the $ operator. For a more thorough introduction to R’s various OOP systems, see http://adv-r.had.co.nz/OO-essentials.html, from Hadley Wickham’s Advanced R (Wickham 2014). 7.2 Object Oriented Programming: Python and R OO concepts (classes with inherentence) were baked into Python from the first published version (version 0.9 in 1991). In contrast, R gets its OO “approach” from its predecessor, S, first released in 1976. For the first 15 years, S had no support for classes, then, suddenly, S got two OO frameworks bolted on in rapid succession: informal classes with S3 in 1991, and formal classes with S4 in 1998. This process continues, with new OO frameworks being periodically released, to try to improve the lackluster OO support in R, with reference classes (R5, 2010) and R6 (2014). Of these, R6 behaves most like Python classes (and also most like OOP focused languages like C++ and Java), including having method definitions be part of class definitions, and allowing objects to be modified by reference. References "],
["references.html", "References", " References "]
]
